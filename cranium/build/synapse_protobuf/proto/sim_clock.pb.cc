// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sim_clock.proto

#include "sim_clock.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_time_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_time_2eproto;
namespace synapse {
namespace msgs {
class SimClockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimClock> _instance;
} _SimClock_default_instance_;
}  // namespace msgs
}  // namespace synapse
static void InitDefaultsscc_info_SimClock_sim_5fclock_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::synapse::msgs::_SimClock_default_instance_;
    new (ptr) ::synapse::msgs::SimClock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::synapse::msgs::SimClock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimClock_sim_5fclock_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SimClock_sim_5fclock_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_Time_time_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sim_5fclock_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sim_5fclock_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sim_5fclock_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sim_5fclock_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::SimClock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::SimClock, header_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::SimClock, system_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::SimClock, real_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::SimClock, sim_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::synapse::msgs::SimClock)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::synapse::msgs::_SimClock_default_instance_),
};

const char descriptor_table_protodef_sim_5fclock_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017sim_clock.proto\022\014synapse.msgs\032\ntime.pr"
  "oto\032\014header.proto\"\227\001\n\010SimClock\022$\n\006header"
  "\030\001 \001(\0132\024.synapse.msgs.Header\022\"\n\006system\030\002"
  " \001(\0132\022.synapse.msgs.Time\022 \n\004real\030\003 \001(\0132\022"
  ".synapse.msgs.Time\022\037\n\003sim\030\004 \001(\0132\022.synaps"
  "e.msgs.Timeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sim_5fclock_2eproto_deps[2] = {
  &::descriptor_table_header_2eproto,
  &::descriptor_table_time_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sim_5fclock_2eproto_sccs[1] = {
  &scc_info_SimClock_sim_5fclock_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sim_5fclock_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sim_5fclock_2eproto = {
  false, false, descriptor_table_protodef_sim_5fclock_2eproto, "sim_clock.proto", 219,
  &descriptor_table_sim_5fclock_2eproto_once, descriptor_table_sim_5fclock_2eproto_sccs, descriptor_table_sim_5fclock_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_sim_5fclock_2eproto::offsets,
  file_level_metadata_sim_5fclock_2eproto, 1, file_level_enum_descriptors_sim_5fclock_2eproto, file_level_service_descriptors_sim_5fclock_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sim_5fclock_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sim_5fclock_2eproto)), true);
namespace synapse {
namespace msgs {

// ===================================================================

void SimClock::InitAsDefaultInstance() {
  ::synapse::msgs::_SimClock_default_instance_._instance.get_mutable()->header_ = const_cast< ::synapse::msgs::Header*>(
      ::synapse::msgs::Header::internal_default_instance());
  ::synapse::msgs::_SimClock_default_instance_._instance.get_mutable()->system_ = const_cast< ::synapse::msgs::Time*>(
      ::synapse::msgs::Time::internal_default_instance());
  ::synapse::msgs::_SimClock_default_instance_._instance.get_mutable()->real_ = const_cast< ::synapse::msgs::Time*>(
      ::synapse::msgs::Time::internal_default_instance());
  ::synapse::msgs::_SimClock_default_instance_._instance.get_mutable()->sim_ = const_cast< ::synapse::msgs::Time*>(
      ::synapse::msgs::Time::internal_default_instance());
}
class SimClock::_Internal {
 public:
  static const ::synapse::msgs::Header& header(const SimClock* msg);
  static const ::synapse::msgs::Time& system(const SimClock* msg);
  static const ::synapse::msgs::Time& real(const SimClock* msg);
  static const ::synapse::msgs::Time& sim(const SimClock* msg);
};

const ::synapse::msgs::Header&
SimClock::_Internal::header(const SimClock* msg) {
  return *msg->header_;
}
const ::synapse::msgs::Time&
SimClock::_Internal::system(const SimClock* msg) {
  return *msg->system_;
}
const ::synapse::msgs::Time&
SimClock::_Internal::real(const SimClock* msg) {
  return *msg->real_;
}
const ::synapse::msgs::Time&
SimClock::_Internal::sim(const SimClock* msg) {
  return *msg->sim_;
}
void SimClock::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void SimClock::clear_system() {
  if (GetArena() == nullptr && system_ != nullptr) {
    delete system_;
  }
  system_ = nullptr;
}
void SimClock::clear_real() {
  if (GetArena() == nullptr && real_ != nullptr) {
    delete real_;
  }
  real_ = nullptr;
}
void SimClock::clear_sim() {
  if (GetArena() == nullptr && sim_ != nullptr) {
    delete sim_;
  }
  sim_ = nullptr;
}
SimClock::SimClock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:synapse.msgs.SimClock)
}
SimClock::SimClock(const SimClock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::synapse::msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_system()) {
    system_ = new ::synapse::msgs::Time(*from.system_);
  } else {
    system_ = nullptr;
  }
  if (from._internal_has_real()) {
    real_ = new ::synapse::msgs::Time(*from.real_);
  } else {
    real_ = nullptr;
  }
  if (from._internal_has_sim()) {
    sim_ = new ::synapse::msgs::Time(*from.sim_);
  } else {
    sim_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:synapse.msgs.SimClock)
}

void SimClock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimClock_sim_5fclock_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sim_) -
      reinterpret_cast<char*>(&header_)) + sizeof(sim_));
}

SimClock::~SimClock() {
  // @@protoc_insertion_point(destructor:synapse.msgs.SimClock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimClock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete system_;
  if (this != internal_default_instance()) delete real_;
  if (this != internal_default_instance()) delete sim_;
}

void SimClock::ArenaDtor(void* object) {
  SimClock* _this = reinterpret_cast< SimClock* >(object);
  (void)_this;
}
void SimClock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimClock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimClock& SimClock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimClock_sim_5fclock_2eproto.base);
  return *internal_default_instance();
}


void SimClock::Clear() {
// @@protoc_insertion_point(message_clear_start:synapse.msgs.SimClock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && system_ != nullptr) {
    delete system_;
  }
  system_ = nullptr;
  if (GetArena() == nullptr && real_ != nullptr) {
    delete real_;
  }
  real_ = nullptr;
  if (GetArena() == nullptr && sim_ != nullptr) {
    delete sim_;
  }
  sim_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimClock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .synapse.msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .synapse.msgs.Time system = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_system(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .synapse.msgs.Time real = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_real(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .synapse.msgs.Time sim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimClock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:synapse.msgs.SimClock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .synapse.msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .synapse.msgs.Time system = 2;
  if (this->has_system()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::system(this), target, stream);
  }

  // .synapse.msgs.Time real = 3;
  if (this->has_real()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::real(this), target, stream);
  }

  // .synapse.msgs.Time sim = 4;
  if (this->has_sim()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sim(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:synapse.msgs.SimClock)
  return target;
}

size_t SimClock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:synapse.msgs.SimClock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .synapse.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .synapse.msgs.Time system = 2;
  if (this->has_system()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *system_);
  }

  // .synapse.msgs.Time real = 3;
  if (this->has_real()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *real_);
  }

  // .synapse.msgs.Time sim = 4;
  if (this->has_sim()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sim_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimClock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:synapse.msgs.SimClock)
  GOOGLE_DCHECK_NE(&from, this);
  const SimClock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimClock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:synapse.msgs.SimClock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:synapse.msgs.SimClock)
    MergeFrom(*source);
  }
}

void SimClock::MergeFrom(const SimClock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:synapse.msgs.SimClock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::synapse::msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_system()) {
    _internal_mutable_system()->::synapse::msgs::Time::MergeFrom(from._internal_system());
  }
  if (from.has_real()) {
    _internal_mutable_real()->::synapse::msgs::Time::MergeFrom(from._internal_real());
  }
  if (from.has_sim()) {
    _internal_mutable_sim()->::synapse::msgs::Time::MergeFrom(from._internal_sim());
  }
}

void SimClock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:synapse.msgs.SimClock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimClock::CopyFrom(const SimClock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:synapse.msgs.SimClock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimClock::IsInitialized() const {
  return true;
}

void SimClock::InternalSwap(SimClock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimClock, sim_)
      + sizeof(SimClock::sim_)
      - PROTOBUF_FIELD_OFFSET(SimClock, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimClock::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace synapse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::synapse::msgs::SimClock* Arena::CreateMaybeMessage< ::synapse::msgs::SimClock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::synapse::msgs::SimClock >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
