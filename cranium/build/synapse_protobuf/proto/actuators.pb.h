// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: actuators.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_actuators_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_actuators_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_actuators_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_actuators_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_actuators_2eproto;
namespace synapse {
namespace msgs {
class Actuators;
class ActuatorsDefaultTypeInternal;
extern ActuatorsDefaultTypeInternal _Actuators_default_instance_;
}  // namespace msgs
}  // namespace synapse
PROTOBUF_NAMESPACE_OPEN
template<> ::synapse::msgs::Actuators* Arena::CreateMaybeMessage<::synapse::msgs::Actuators>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace synapse {
namespace msgs {

// ===================================================================

class Actuators PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:synapse.msgs.Actuators) */ {
 public:
  inline Actuators() : Actuators(nullptr) {};
  virtual ~Actuators();

  Actuators(const Actuators& from);
  Actuators(Actuators&& from) noexcept
    : Actuators() {
    *this = ::std::move(from);
  }

  inline Actuators& operator=(const Actuators& from) {
    CopyFrom(from);
    return *this;
  }
  inline Actuators& operator=(Actuators&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Actuators& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Actuators* internal_default_instance() {
    return reinterpret_cast<const Actuators*>(
               &_Actuators_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Actuators& a, Actuators& b) {
    a.Swap(&b);
  }
  inline void Swap(Actuators* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Actuators* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Actuators* New() const final {
    return CreateMaybeMessage<Actuators>(nullptr);
  }

  Actuators* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Actuators>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Actuators& from);
  void MergeFrom(const Actuators& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Actuators* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "synapse.msgs.Actuators";
  }
  protected:
  explicit Actuators(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actuators_2eproto);
    return ::descriptor_table_actuators_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kNormalizedFieldNumber = 4,
    kHeaderFieldNumber = 1,
  };
  // repeated double position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double velocity = 3;
  int velocity_size() const;
  private:
  int _internal_velocity_size() const;
  public:
  void clear_velocity();
  private:
  double _internal_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_velocity() const;
  void _internal_add_velocity(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_velocity();
  public:
  double velocity(int index) const;
  void set_velocity(int index, double value);
  void add_velocity(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_velocity();

  // repeated double normalized = 4;
  int normalized_size() const;
  private:
  int _internal_normalized_size() const;
  public:
  void clear_normalized();
  private:
  double _internal_normalized(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_normalized() const;
  void _internal_add_normalized(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_normalized();
  public:
  double normalized(int index) const;
  void set_normalized(int index, double value);
  void add_normalized(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      normalized() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_normalized();

  // .synapse.msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::synapse::msgs::Header& header() const;
  ::synapse::msgs::Header* release_header();
  ::synapse::msgs::Header* mutable_header();
  void set_allocated_header(::synapse::msgs::Header* header);
  private:
  const ::synapse::msgs::Header& _internal_header() const;
  ::synapse::msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::synapse::msgs::Header* header);
  ::synapse::msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:synapse.msgs.Actuators)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  mutable std::atomic<int> _position_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > velocity_;
  mutable std::atomic<int> _velocity_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > normalized_;
  mutable std::atomic<int> _normalized_cached_byte_size_;
  ::synapse::msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actuators_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Actuators

// .synapse.msgs.Header header = 1;
inline bool Actuators::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Actuators::has_header() const {
  return _internal_has_header();
}
inline const ::synapse::msgs::Header& Actuators::_internal_header() const {
  const ::synapse::msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::synapse::msgs::Header*>(
      &::synapse::msgs::_Header_default_instance_);
}
inline const ::synapse::msgs::Header& Actuators::header() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Actuators.header)
  return _internal_header();
}
inline void Actuators::unsafe_arena_set_allocated_header(
    ::synapse::msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:synapse.msgs.Actuators.header)
}
inline ::synapse::msgs::Header* Actuators::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::synapse::msgs::Header* Actuators::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:synapse.msgs.Actuators.header)
  
  ::synapse::msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::synapse::msgs::Header* Actuators::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::synapse::msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::synapse::msgs::Header* Actuators::mutable_header() {
  // @@protoc_insertion_point(field_mutable:synapse.msgs.Actuators.header)
  return _internal_mutable_header();
}
inline void Actuators::set_allocated_header(::synapse::msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:synapse.msgs.Actuators.header)
}

// repeated double position = 2;
inline int Actuators::_internal_position_size() const {
  return position_.size();
}
inline int Actuators::position_size() const {
  return _internal_position_size();
}
inline void Actuators::clear_position() {
  position_.Clear();
}
inline double Actuators::_internal_position(int index) const {
  return position_.Get(index);
}
inline double Actuators::position(int index) const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Actuators.position)
  return _internal_position(index);
}
inline void Actuators::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Actuators.position)
}
inline void Actuators::_internal_add_position(double value) {
  position_.Add(value);
}
inline void Actuators::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:synapse.msgs.Actuators.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Actuators::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Actuators::position() const {
  // @@protoc_insertion_point(field_list:synapse.msgs.Actuators.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Actuators::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Actuators::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:synapse.msgs.Actuators.position)
  return _internal_mutable_position();
}

// repeated double velocity = 3;
inline int Actuators::_internal_velocity_size() const {
  return velocity_.size();
}
inline int Actuators::velocity_size() const {
  return _internal_velocity_size();
}
inline void Actuators::clear_velocity() {
  velocity_.Clear();
}
inline double Actuators::_internal_velocity(int index) const {
  return velocity_.Get(index);
}
inline double Actuators::velocity(int index) const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Actuators.velocity)
  return _internal_velocity(index);
}
inline void Actuators::set_velocity(int index, double value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Actuators.velocity)
}
inline void Actuators::_internal_add_velocity(double value) {
  velocity_.Add(value);
}
inline void Actuators::add_velocity(double value) {
  _internal_add_velocity(value);
  // @@protoc_insertion_point(field_add:synapse.msgs.Actuators.velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Actuators::_internal_velocity() const {
  return velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Actuators::velocity() const {
  // @@protoc_insertion_point(field_list:synapse.msgs.Actuators.velocity)
  return _internal_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Actuators::_internal_mutable_velocity() {
  return &velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Actuators::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:synapse.msgs.Actuators.velocity)
  return _internal_mutable_velocity();
}

// repeated double normalized = 4;
inline int Actuators::_internal_normalized_size() const {
  return normalized_.size();
}
inline int Actuators::normalized_size() const {
  return _internal_normalized_size();
}
inline void Actuators::clear_normalized() {
  normalized_.Clear();
}
inline double Actuators::_internal_normalized(int index) const {
  return normalized_.Get(index);
}
inline double Actuators::normalized(int index) const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Actuators.normalized)
  return _internal_normalized(index);
}
inline void Actuators::set_normalized(int index, double value) {
  normalized_.Set(index, value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Actuators.normalized)
}
inline void Actuators::_internal_add_normalized(double value) {
  normalized_.Add(value);
}
inline void Actuators::add_normalized(double value) {
  _internal_add_normalized(value);
  // @@protoc_insertion_point(field_add:synapse.msgs.Actuators.normalized)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Actuators::_internal_normalized() const {
  return normalized_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Actuators::normalized() const {
  // @@protoc_insertion_point(field_list:synapse.msgs.Actuators.normalized)
  return _internal_normalized();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Actuators::_internal_mutable_normalized() {
  return &normalized_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Actuators::mutable_normalized() {
  // @@protoc_insertion_point(field_mutable_list:synapse.msgs.Actuators.normalized)
  return _internal_mutable_normalized();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace synapse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_actuators_2eproto
