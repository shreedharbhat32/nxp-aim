// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battery_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_battery_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_battery_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_battery_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_battery_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_battery_5fstate_2eproto;
namespace synapse {
namespace msgs {
class BatteryState;
class BatteryStateDefaultTypeInternal;
extern BatteryStateDefaultTypeInternal _BatteryState_default_instance_;
}  // namespace msgs
}  // namespace synapse
PROTOBUF_NAMESPACE_OPEN
template<> ::synapse::msgs::BatteryState* Arena::CreateMaybeMessage<::synapse::msgs::BatteryState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace synapse {
namespace msgs {

enum BatteryState_PowerSupplyStatus : int {
  BatteryState_PowerSupplyStatus_UNKNOWN_STATUS = 0,
  BatteryState_PowerSupplyStatus_CHARGING = 1,
  BatteryState_PowerSupplyStatus_DISCHARGING = 2,
  BatteryState_PowerSupplyStatus_NOT_CHARGING = 3,
  BatteryState_PowerSupplyStatus_FULL = 4,
  BatteryState_PowerSupplyStatus_BatteryState_PowerSupplyStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BatteryState_PowerSupplyStatus_BatteryState_PowerSupplyStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BatteryState_PowerSupplyStatus_IsValid(int value);
constexpr BatteryState_PowerSupplyStatus BatteryState_PowerSupplyStatus_PowerSupplyStatus_MIN = BatteryState_PowerSupplyStatus_UNKNOWN_STATUS;
constexpr BatteryState_PowerSupplyStatus BatteryState_PowerSupplyStatus_PowerSupplyStatus_MAX = BatteryState_PowerSupplyStatus_FULL;
constexpr int BatteryState_PowerSupplyStatus_PowerSupplyStatus_ARRAYSIZE = BatteryState_PowerSupplyStatus_PowerSupplyStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryState_PowerSupplyStatus_descriptor();
template<typename T>
inline const std::string& BatteryState_PowerSupplyStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BatteryState_PowerSupplyStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BatteryState_PowerSupplyStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BatteryState_PowerSupplyStatus_descriptor(), enum_t_value);
}
inline bool BatteryState_PowerSupplyStatus_Parse(
    const std::string& name, BatteryState_PowerSupplyStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BatteryState_PowerSupplyStatus>(
    BatteryState_PowerSupplyStatus_descriptor(), name, value);
}
enum BatteryState_PowerSupplyHealth : int {
  BatteryState_PowerSupplyHealth_UNKNOWN_HEALTH = 0,
  BatteryState_PowerSupplyHealth_GOOD = 1,
  BatteryState_PowerSupplyHealth_OVERHEAT = 2,
  BatteryState_PowerSupplyHealth_DEAD = 3,
  BatteryState_PowerSupplyHealth_OVERVOLTAGE = 4,
  BatteryState_PowerSupplyHealth_UNSPEC_FAILURE = 5,
  BatteryState_PowerSupplyHealth_COLD = 6,
  BatteryState_PowerSupplyHealth_WATCHDOG_TIMER_EXPIRE = 7,
  BatteryState_PowerSupplyHealth_SAFETY_TIMER_EXPIRE = 8,
  BatteryState_PowerSupplyHealth_BatteryState_PowerSupplyHealth_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BatteryState_PowerSupplyHealth_BatteryState_PowerSupplyHealth_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BatteryState_PowerSupplyHealth_IsValid(int value);
constexpr BatteryState_PowerSupplyHealth BatteryState_PowerSupplyHealth_PowerSupplyHealth_MIN = BatteryState_PowerSupplyHealth_UNKNOWN_HEALTH;
constexpr BatteryState_PowerSupplyHealth BatteryState_PowerSupplyHealth_PowerSupplyHealth_MAX = BatteryState_PowerSupplyHealth_SAFETY_TIMER_EXPIRE;
constexpr int BatteryState_PowerSupplyHealth_PowerSupplyHealth_ARRAYSIZE = BatteryState_PowerSupplyHealth_PowerSupplyHealth_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryState_PowerSupplyHealth_descriptor();
template<typename T>
inline const std::string& BatteryState_PowerSupplyHealth_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BatteryState_PowerSupplyHealth>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BatteryState_PowerSupplyHealth_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BatteryState_PowerSupplyHealth_descriptor(), enum_t_value);
}
inline bool BatteryState_PowerSupplyHealth_Parse(
    const std::string& name, BatteryState_PowerSupplyHealth* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BatteryState_PowerSupplyHealth>(
    BatteryState_PowerSupplyHealth_descriptor(), name, value);
}
enum BatteryState_PowerSupplyTechnology : int {
  BatteryState_PowerSupplyTechnology_UNKNOWN_TECHNOLOGY = 0,
  BatteryState_PowerSupplyTechnology_NIMH = 1,
  BatteryState_PowerSupplyTechnology_LION = 2,
  BatteryState_PowerSupplyTechnology_LIPO = 3,
  BatteryState_PowerSupplyTechnology_LIFE = 4,
  BatteryState_PowerSupplyTechnology_NICD = 5,
  BatteryState_PowerSupplyTechnology_LIMN = 6,
  BatteryState_PowerSupplyTechnology_TERNARY = 7,
  BatteryState_PowerSupplyTechnology_VRLA = 8,
  BatteryState_PowerSupplyTechnology_BatteryState_PowerSupplyTechnology_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BatteryState_PowerSupplyTechnology_BatteryState_PowerSupplyTechnology_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BatteryState_PowerSupplyTechnology_IsValid(int value);
constexpr BatteryState_PowerSupplyTechnology BatteryState_PowerSupplyTechnology_PowerSupplyTechnology_MIN = BatteryState_PowerSupplyTechnology_UNKNOWN_TECHNOLOGY;
constexpr BatteryState_PowerSupplyTechnology BatteryState_PowerSupplyTechnology_PowerSupplyTechnology_MAX = BatteryState_PowerSupplyTechnology_VRLA;
constexpr int BatteryState_PowerSupplyTechnology_PowerSupplyTechnology_ARRAYSIZE = BatteryState_PowerSupplyTechnology_PowerSupplyTechnology_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryState_PowerSupplyTechnology_descriptor();
template<typename T>
inline const std::string& BatteryState_PowerSupplyTechnology_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BatteryState_PowerSupplyTechnology>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BatteryState_PowerSupplyTechnology_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BatteryState_PowerSupplyTechnology_descriptor(), enum_t_value);
}
inline bool BatteryState_PowerSupplyTechnology_Parse(
    const std::string& name, BatteryState_PowerSupplyTechnology* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BatteryState_PowerSupplyTechnology>(
    BatteryState_PowerSupplyTechnology_descriptor(), name, value);
}
// ===================================================================

class BatteryState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:synapse.msgs.BatteryState) */ {
 public:
  inline BatteryState() : BatteryState(nullptr) {};
  virtual ~BatteryState();

  BatteryState(const BatteryState& from);
  BatteryState(BatteryState&& from) noexcept
    : BatteryState() {
    *this = ::std::move(from);
  }

  inline BatteryState& operator=(const BatteryState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryState& operator=(BatteryState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatteryState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatteryState* internal_default_instance() {
    return reinterpret_cast<const BatteryState*>(
               &_BatteryState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatteryState& a, BatteryState& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatteryState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatteryState* New() const final {
    return CreateMaybeMessage<BatteryState>(nullptr);
  }

  BatteryState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatteryState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatteryState& from);
  void MergeFrom(const BatteryState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "synapse.msgs.BatteryState";
  }
  protected:
  explicit BatteryState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battery_5fstate_2eproto);
    return ::descriptor_table_battery_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BatteryState_PowerSupplyStatus PowerSupplyStatus;
  static constexpr PowerSupplyStatus UNKNOWN_STATUS =
    BatteryState_PowerSupplyStatus_UNKNOWN_STATUS;
  static constexpr PowerSupplyStatus CHARGING =
    BatteryState_PowerSupplyStatus_CHARGING;
  static constexpr PowerSupplyStatus DISCHARGING =
    BatteryState_PowerSupplyStatus_DISCHARGING;
  static constexpr PowerSupplyStatus NOT_CHARGING =
    BatteryState_PowerSupplyStatus_NOT_CHARGING;
  static constexpr PowerSupplyStatus FULL =
    BatteryState_PowerSupplyStatus_FULL;
  static inline bool PowerSupplyStatus_IsValid(int value) {
    return BatteryState_PowerSupplyStatus_IsValid(value);
  }
  static constexpr PowerSupplyStatus PowerSupplyStatus_MIN =
    BatteryState_PowerSupplyStatus_PowerSupplyStatus_MIN;
  static constexpr PowerSupplyStatus PowerSupplyStatus_MAX =
    BatteryState_PowerSupplyStatus_PowerSupplyStatus_MAX;
  static constexpr int PowerSupplyStatus_ARRAYSIZE =
    BatteryState_PowerSupplyStatus_PowerSupplyStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PowerSupplyStatus_descriptor() {
    return BatteryState_PowerSupplyStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& PowerSupplyStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PowerSupplyStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PowerSupplyStatus_Name.");
    return BatteryState_PowerSupplyStatus_Name(enum_t_value);
  }
  static inline bool PowerSupplyStatus_Parse(const std::string& name,
      PowerSupplyStatus* value) {
    return BatteryState_PowerSupplyStatus_Parse(name, value);
  }

  typedef BatteryState_PowerSupplyHealth PowerSupplyHealth;
  static constexpr PowerSupplyHealth UNKNOWN_HEALTH =
    BatteryState_PowerSupplyHealth_UNKNOWN_HEALTH;
  static constexpr PowerSupplyHealth GOOD =
    BatteryState_PowerSupplyHealth_GOOD;
  static constexpr PowerSupplyHealth OVERHEAT =
    BatteryState_PowerSupplyHealth_OVERHEAT;
  static constexpr PowerSupplyHealth DEAD =
    BatteryState_PowerSupplyHealth_DEAD;
  static constexpr PowerSupplyHealth OVERVOLTAGE =
    BatteryState_PowerSupplyHealth_OVERVOLTAGE;
  static constexpr PowerSupplyHealth UNSPEC_FAILURE =
    BatteryState_PowerSupplyHealth_UNSPEC_FAILURE;
  static constexpr PowerSupplyHealth COLD =
    BatteryState_PowerSupplyHealth_COLD;
  static constexpr PowerSupplyHealth WATCHDOG_TIMER_EXPIRE =
    BatteryState_PowerSupplyHealth_WATCHDOG_TIMER_EXPIRE;
  static constexpr PowerSupplyHealth SAFETY_TIMER_EXPIRE =
    BatteryState_PowerSupplyHealth_SAFETY_TIMER_EXPIRE;
  static inline bool PowerSupplyHealth_IsValid(int value) {
    return BatteryState_PowerSupplyHealth_IsValid(value);
  }
  static constexpr PowerSupplyHealth PowerSupplyHealth_MIN =
    BatteryState_PowerSupplyHealth_PowerSupplyHealth_MIN;
  static constexpr PowerSupplyHealth PowerSupplyHealth_MAX =
    BatteryState_PowerSupplyHealth_PowerSupplyHealth_MAX;
  static constexpr int PowerSupplyHealth_ARRAYSIZE =
    BatteryState_PowerSupplyHealth_PowerSupplyHealth_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PowerSupplyHealth_descriptor() {
    return BatteryState_PowerSupplyHealth_descriptor();
  }
  template<typename T>
  static inline const std::string& PowerSupplyHealth_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PowerSupplyHealth>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PowerSupplyHealth_Name.");
    return BatteryState_PowerSupplyHealth_Name(enum_t_value);
  }
  static inline bool PowerSupplyHealth_Parse(const std::string& name,
      PowerSupplyHealth* value) {
    return BatteryState_PowerSupplyHealth_Parse(name, value);
  }

  typedef BatteryState_PowerSupplyTechnology PowerSupplyTechnology;
  static constexpr PowerSupplyTechnology UNKNOWN_TECHNOLOGY =
    BatteryState_PowerSupplyTechnology_UNKNOWN_TECHNOLOGY;
  static constexpr PowerSupplyTechnology NIMH =
    BatteryState_PowerSupplyTechnology_NIMH;
  static constexpr PowerSupplyTechnology LION =
    BatteryState_PowerSupplyTechnology_LION;
  static constexpr PowerSupplyTechnology LIPO =
    BatteryState_PowerSupplyTechnology_LIPO;
  static constexpr PowerSupplyTechnology LIFE =
    BatteryState_PowerSupplyTechnology_LIFE;
  static constexpr PowerSupplyTechnology NICD =
    BatteryState_PowerSupplyTechnology_NICD;
  static constexpr PowerSupplyTechnology LIMN =
    BatteryState_PowerSupplyTechnology_LIMN;
  static constexpr PowerSupplyTechnology TERNARY =
    BatteryState_PowerSupplyTechnology_TERNARY;
  static constexpr PowerSupplyTechnology VRLA =
    BatteryState_PowerSupplyTechnology_VRLA;
  static inline bool PowerSupplyTechnology_IsValid(int value) {
    return BatteryState_PowerSupplyTechnology_IsValid(value);
  }
  static constexpr PowerSupplyTechnology PowerSupplyTechnology_MIN =
    BatteryState_PowerSupplyTechnology_PowerSupplyTechnology_MIN;
  static constexpr PowerSupplyTechnology PowerSupplyTechnology_MAX =
    BatteryState_PowerSupplyTechnology_PowerSupplyTechnology_MAX;
  static constexpr int PowerSupplyTechnology_ARRAYSIZE =
    BatteryState_PowerSupplyTechnology_PowerSupplyTechnology_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PowerSupplyTechnology_descriptor() {
    return BatteryState_PowerSupplyTechnology_descriptor();
  }
  template<typename T>
  static inline const std::string& PowerSupplyTechnology_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PowerSupplyTechnology>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PowerSupplyTechnology_Name.");
    return BatteryState_PowerSupplyTechnology_Name(enum_t_value);
  }
  static inline bool PowerSupplyTechnology_Parse(const std::string& name,
      PowerSupplyTechnology* value) {
    return BatteryState_PowerSupplyTechnology_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCellVoltageFieldNumber = 13,
    kCellTemperatureFieldNumber = 14,
    kLocationFieldNumber = 15,
    kSerialNumberFieldNumber = 16,
    kHeaderFieldNumber = 1,
    kVoltageFieldNumber = 2,
    kTemperatureFieldNumber = 3,
    kCurrentFieldNumber = 4,
    kChargeFieldNumber = 5,
    kCapacityFieldNumber = 6,
    kDesignCapacityFieldNumber = 7,
    kPercentageFieldNumber = 8,
    kPowerSupplyStatusFieldNumber = 9,
    kPowerSupplyHealthFieldNumber = 10,
    kPowerSupplyTechnologyFieldNumber = 11,
    kPresentFieldNumber = 12,
  };
  // repeated double cell_voltage = 13;
  int cell_voltage_size() const;
  private:
  int _internal_cell_voltage_size() const;
  public:
  void clear_cell_voltage();
  private:
  double _internal_cell_voltage(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_cell_voltage() const;
  void _internal_add_cell_voltage(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_cell_voltage();
  public:
  double cell_voltage(int index) const;
  void set_cell_voltage(int index, double value);
  void add_cell_voltage(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      cell_voltage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_cell_voltage();

  // repeated double cell_temperature = 14;
  int cell_temperature_size() const;
  private:
  int _internal_cell_temperature_size() const;
  public:
  void clear_cell_temperature();
  private:
  double _internal_cell_temperature(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_cell_temperature() const;
  void _internal_add_cell_temperature(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_cell_temperature();
  public:
  double cell_temperature(int index) const;
  void set_cell_temperature(int index, double value);
  void add_cell_temperature(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      cell_temperature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_cell_temperature();

  // string location = 15;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_location();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_location(
      std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string serial_number = 16;
  void clear_serial_number();
  const std::string& serial_number() const;
  void set_serial_number(const std::string& value);
  void set_serial_number(std::string&& value);
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  std::string* mutable_serial_number();
  std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_serial_number();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_serial_number(
      std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // .synapse.msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::synapse::msgs::Header& header() const;
  ::synapse::msgs::Header* release_header();
  ::synapse::msgs::Header* mutable_header();
  void set_allocated_header(::synapse::msgs::Header* header);
  private:
  const ::synapse::msgs::Header& _internal_header() const;
  ::synapse::msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::synapse::msgs::Header* header);
  ::synapse::msgs::Header* unsafe_arena_release_header();

  // double voltage = 2;
  void clear_voltage();
  double voltage() const;
  void set_voltage(double value);
  private:
  double _internal_voltage() const;
  void _internal_set_voltage(double value);
  public:

  // double temperature = 3;
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // double current = 4;
  void clear_current();
  double current() const;
  void set_current(double value);
  private:
  double _internal_current() const;
  void _internal_set_current(double value);
  public:

  // double charge = 5;
  void clear_charge();
  double charge() const;
  void set_charge(double value);
  private:
  double _internal_charge() const;
  void _internal_set_charge(double value);
  public:

  // double capacity = 6;
  void clear_capacity();
  double capacity() const;
  void set_capacity(double value);
  private:
  double _internal_capacity() const;
  void _internal_set_capacity(double value);
  public:

  // double design_capacity = 7;
  void clear_design_capacity();
  double design_capacity() const;
  void set_design_capacity(double value);
  private:
  double _internal_design_capacity() const;
  void _internal_set_design_capacity(double value);
  public:

  // double percentage = 8;
  void clear_percentage();
  double percentage() const;
  void set_percentage(double value);
  private:
  double _internal_percentage() const;
  void _internal_set_percentage(double value);
  public:

  // .synapse.msgs.BatteryState.PowerSupplyStatus power_supply_status = 9;
  void clear_power_supply_status();
  ::synapse::msgs::BatteryState_PowerSupplyStatus power_supply_status() const;
  void set_power_supply_status(::synapse::msgs::BatteryState_PowerSupplyStatus value);
  private:
  ::synapse::msgs::BatteryState_PowerSupplyStatus _internal_power_supply_status() const;
  void _internal_set_power_supply_status(::synapse::msgs::BatteryState_PowerSupplyStatus value);
  public:

  // .synapse.msgs.BatteryState.PowerSupplyHealth power_supply_health = 10;
  void clear_power_supply_health();
  ::synapse::msgs::BatteryState_PowerSupplyHealth power_supply_health() const;
  void set_power_supply_health(::synapse::msgs::BatteryState_PowerSupplyHealth value);
  private:
  ::synapse::msgs::BatteryState_PowerSupplyHealth _internal_power_supply_health() const;
  void _internal_set_power_supply_health(::synapse::msgs::BatteryState_PowerSupplyHealth value);
  public:

  // .synapse.msgs.BatteryState.PowerSupplyTechnology power_supply_technology = 11;
  void clear_power_supply_technology();
  ::synapse::msgs::BatteryState_PowerSupplyTechnology power_supply_technology() const;
  void set_power_supply_technology(::synapse::msgs::BatteryState_PowerSupplyTechnology value);
  private:
  ::synapse::msgs::BatteryState_PowerSupplyTechnology _internal_power_supply_technology() const;
  void _internal_set_power_supply_technology(::synapse::msgs::BatteryState_PowerSupplyTechnology value);
  public:

  // bool present = 12;
  void clear_present();
  bool present() const;
  void set_present(bool value);
  private:
  bool _internal_present() const;
  void _internal_set_present(bool value);
  public:

  // @@protoc_insertion_point(class_scope:synapse.msgs.BatteryState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > cell_voltage_;
  mutable std::atomic<int> _cell_voltage_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > cell_temperature_;
  mutable std::atomic<int> _cell_temperature_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::synapse::msgs::Header* header_;
  double voltage_;
  double temperature_;
  double current_;
  double charge_;
  double capacity_;
  double design_capacity_;
  double percentage_;
  int power_supply_status_;
  int power_supply_health_;
  int power_supply_technology_;
  bool present_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_battery_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatteryState

// .synapse.msgs.Header header = 1;
inline bool BatteryState::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool BatteryState::has_header() const {
  return _internal_has_header();
}
inline const ::synapse::msgs::Header& BatteryState::_internal_header() const {
  const ::synapse::msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::synapse::msgs::Header*>(
      &::synapse::msgs::_Header_default_instance_);
}
inline const ::synapse::msgs::Header& BatteryState::header() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.header)
  return _internal_header();
}
inline void BatteryState::unsafe_arena_set_allocated_header(
    ::synapse::msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:synapse.msgs.BatteryState.header)
}
inline ::synapse::msgs::Header* BatteryState::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::synapse::msgs::Header* BatteryState::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:synapse.msgs.BatteryState.header)
  
  ::synapse::msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::synapse::msgs::Header* BatteryState::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::synapse::msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::synapse::msgs::Header* BatteryState::mutable_header() {
  // @@protoc_insertion_point(field_mutable:synapse.msgs.BatteryState.header)
  return _internal_mutable_header();
}
inline void BatteryState::set_allocated_header(::synapse::msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:synapse.msgs.BatteryState.header)
}

// double voltage = 2;
inline void BatteryState::clear_voltage() {
  voltage_ = 0;
}
inline double BatteryState::_internal_voltage() const {
  return voltage_;
}
inline double BatteryState::voltage() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.voltage)
  return _internal_voltage();
}
inline void BatteryState::_internal_set_voltage(double value) {
  
  voltage_ = value;
}
inline void BatteryState::set_voltage(double value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.voltage)
}

// double temperature = 3;
inline void BatteryState::clear_temperature() {
  temperature_ = 0;
}
inline double BatteryState::_internal_temperature() const {
  return temperature_;
}
inline double BatteryState::temperature() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.temperature)
  return _internal_temperature();
}
inline void BatteryState::_internal_set_temperature(double value) {
  
  temperature_ = value;
}
inline void BatteryState::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.temperature)
}

// double current = 4;
inline void BatteryState::clear_current() {
  current_ = 0;
}
inline double BatteryState::_internal_current() const {
  return current_;
}
inline double BatteryState::current() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.current)
  return _internal_current();
}
inline void BatteryState::_internal_set_current(double value) {
  
  current_ = value;
}
inline void BatteryState::set_current(double value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.current)
}

// double charge = 5;
inline void BatteryState::clear_charge() {
  charge_ = 0;
}
inline double BatteryState::_internal_charge() const {
  return charge_;
}
inline double BatteryState::charge() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.charge)
  return _internal_charge();
}
inline void BatteryState::_internal_set_charge(double value) {
  
  charge_ = value;
}
inline void BatteryState::set_charge(double value) {
  _internal_set_charge(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.charge)
}

// double capacity = 6;
inline void BatteryState::clear_capacity() {
  capacity_ = 0;
}
inline double BatteryState::_internal_capacity() const {
  return capacity_;
}
inline double BatteryState::capacity() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.capacity)
  return _internal_capacity();
}
inline void BatteryState::_internal_set_capacity(double value) {
  
  capacity_ = value;
}
inline void BatteryState::set_capacity(double value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.capacity)
}

// double design_capacity = 7;
inline void BatteryState::clear_design_capacity() {
  design_capacity_ = 0;
}
inline double BatteryState::_internal_design_capacity() const {
  return design_capacity_;
}
inline double BatteryState::design_capacity() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.design_capacity)
  return _internal_design_capacity();
}
inline void BatteryState::_internal_set_design_capacity(double value) {
  
  design_capacity_ = value;
}
inline void BatteryState::set_design_capacity(double value) {
  _internal_set_design_capacity(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.design_capacity)
}

// double percentage = 8;
inline void BatteryState::clear_percentage() {
  percentage_ = 0;
}
inline double BatteryState::_internal_percentage() const {
  return percentage_;
}
inline double BatteryState::percentage() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.percentage)
  return _internal_percentage();
}
inline void BatteryState::_internal_set_percentage(double value) {
  
  percentage_ = value;
}
inline void BatteryState::set_percentage(double value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.percentage)
}

// .synapse.msgs.BatteryState.PowerSupplyStatus power_supply_status = 9;
inline void BatteryState::clear_power_supply_status() {
  power_supply_status_ = 0;
}
inline ::synapse::msgs::BatteryState_PowerSupplyStatus BatteryState::_internal_power_supply_status() const {
  return static_cast< ::synapse::msgs::BatteryState_PowerSupplyStatus >(power_supply_status_);
}
inline ::synapse::msgs::BatteryState_PowerSupplyStatus BatteryState::power_supply_status() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.power_supply_status)
  return _internal_power_supply_status();
}
inline void BatteryState::_internal_set_power_supply_status(::synapse::msgs::BatteryState_PowerSupplyStatus value) {
  
  power_supply_status_ = value;
}
inline void BatteryState::set_power_supply_status(::synapse::msgs::BatteryState_PowerSupplyStatus value) {
  _internal_set_power_supply_status(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.power_supply_status)
}

// .synapse.msgs.BatteryState.PowerSupplyHealth power_supply_health = 10;
inline void BatteryState::clear_power_supply_health() {
  power_supply_health_ = 0;
}
inline ::synapse::msgs::BatteryState_PowerSupplyHealth BatteryState::_internal_power_supply_health() const {
  return static_cast< ::synapse::msgs::BatteryState_PowerSupplyHealth >(power_supply_health_);
}
inline ::synapse::msgs::BatteryState_PowerSupplyHealth BatteryState::power_supply_health() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.power_supply_health)
  return _internal_power_supply_health();
}
inline void BatteryState::_internal_set_power_supply_health(::synapse::msgs::BatteryState_PowerSupplyHealth value) {
  
  power_supply_health_ = value;
}
inline void BatteryState::set_power_supply_health(::synapse::msgs::BatteryState_PowerSupplyHealth value) {
  _internal_set_power_supply_health(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.power_supply_health)
}

// .synapse.msgs.BatteryState.PowerSupplyTechnology power_supply_technology = 11;
inline void BatteryState::clear_power_supply_technology() {
  power_supply_technology_ = 0;
}
inline ::synapse::msgs::BatteryState_PowerSupplyTechnology BatteryState::_internal_power_supply_technology() const {
  return static_cast< ::synapse::msgs::BatteryState_PowerSupplyTechnology >(power_supply_technology_);
}
inline ::synapse::msgs::BatteryState_PowerSupplyTechnology BatteryState::power_supply_technology() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.power_supply_technology)
  return _internal_power_supply_technology();
}
inline void BatteryState::_internal_set_power_supply_technology(::synapse::msgs::BatteryState_PowerSupplyTechnology value) {
  
  power_supply_technology_ = value;
}
inline void BatteryState::set_power_supply_technology(::synapse::msgs::BatteryState_PowerSupplyTechnology value) {
  _internal_set_power_supply_technology(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.power_supply_technology)
}

// bool present = 12;
inline void BatteryState::clear_present() {
  present_ = false;
}
inline bool BatteryState::_internal_present() const {
  return present_;
}
inline bool BatteryState::present() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.present)
  return _internal_present();
}
inline void BatteryState::_internal_set_present(bool value) {
  
  present_ = value;
}
inline void BatteryState::set_present(bool value) {
  _internal_set_present(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.present)
}

// repeated double cell_voltage = 13;
inline int BatteryState::_internal_cell_voltage_size() const {
  return cell_voltage_.size();
}
inline int BatteryState::cell_voltage_size() const {
  return _internal_cell_voltage_size();
}
inline void BatteryState::clear_cell_voltage() {
  cell_voltage_.Clear();
}
inline double BatteryState::_internal_cell_voltage(int index) const {
  return cell_voltage_.Get(index);
}
inline double BatteryState::cell_voltage(int index) const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.cell_voltage)
  return _internal_cell_voltage(index);
}
inline void BatteryState::set_cell_voltage(int index, double value) {
  cell_voltage_.Set(index, value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.cell_voltage)
}
inline void BatteryState::_internal_add_cell_voltage(double value) {
  cell_voltage_.Add(value);
}
inline void BatteryState::add_cell_voltage(double value) {
  _internal_add_cell_voltage(value);
  // @@protoc_insertion_point(field_add:synapse.msgs.BatteryState.cell_voltage)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BatteryState::_internal_cell_voltage() const {
  return cell_voltage_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BatteryState::cell_voltage() const {
  // @@protoc_insertion_point(field_list:synapse.msgs.BatteryState.cell_voltage)
  return _internal_cell_voltage();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BatteryState::_internal_mutable_cell_voltage() {
  return &cell_voltage_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BatteryState::mutable_cell_voltage() {
  // @@protoc_insertion_point(field_mutable_list:synapse.msgs.BatteryState.cell_voltage)
  return _internal_mutable_cell_voltage();
}

// repeated double cell_temperature = 14;
inline int BatteryState::_internal_cell_temperature_size() const {
  return cell_temperature_.size();
}
inline int BatteryState::cell_temperature_size() const {
  return _internal_cell_temperature_size();
}
inline void BatteryState::clear_cell_temperature() {
  cell_temperature_.Clear();
}
inline double BatteryState::_internal_cell_temperature(int index) const {
  return cell_temperature_.Get(index);
}
inline double BatteryState::cell_temperature(int index) const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.cell_temperature)
  return _internal_cell_temperature(index);
}
inline void BatteryState::set_cell_temperature(int index, double value) {
  cell_temperature_.Set(index, value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.cell_temperature)
}
inline void BatteryState::_internal_add_cell_temperature(double value) {
  cell_temperature_.Add(value);
}
inline void BatteryState::add_cell_temperature(double value) {
  _internal_add_cell_temperature(value);
  // @@protoc_insertion_point(field_add:synapse.msgs.BatteryState.cell_temperature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BatteryState::_internal_cell_temperature() const {
  return cell_temperature_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BatteryState::cell_temperature() const {
  // @@protoc_insertion_point(field_list:synapse.msgs.BatteryState.cell_temperature)
  return _internal_cell_temperature();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BatteryState::_internal_mutable_cell_temperature() {
  return &cell_temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BatteryState::mutable_cell_temperature() {
  // @@protoc_insertion_point(field_mutable_list:synapse.msgs.BatteryState.cell_temperature)
  return _internal_mutable_cell_temperature();
}

// string location = 15;
inline void BatteryState::clear_location() {
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BatteryState::location() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.location)
  return _internal_location();
}
inline void BatteryState::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.location)
}
inline std::string* BatteryState::mutable_location() {
  // @@protoc_insertion_point(field_mutable:synapse.msgs.BatteryState.location)
  return _internal_mutable_location();
}
inline const std::string& BatteryState::_internal_location() const {
  return location_.Get();
}
inline void BatteryState::_internal_set_location(const std::string& value) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BatteryState::set_location(std::string&& value) {
  
  location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:synapse.msgs.BatteryState.location)
}
inline void BatteryState::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:synapse.msgs.BatteryState.location)
}
inline void BatteryState::set_location(const char* value,
    size_t size) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:synapse.msgs.BatteryState.location)
}
inline std::string* BatteryState::_internal_mutable_location() {
  
  return location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BatteryState::release_location() {
  // @@protoc_insertion_point(field_release:synapse.msgs.BatteryState.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatteryState::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:synapse.msgs.BatteryState.location)
}
inline std::string* BatteryState::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:synapse.msgs.BatteryState.location)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return location_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BatteryState::unsafe_arena_set_allocated_location(
    std::string* location) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (location != nullptr) {
    
  } else {
    
  }
  location_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      location, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:synapse.msgs.BatteryState.location)
}

// string serial_number = 16;
inline void BatteryState::clear_serial_number() {
  serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BatteryState::serial_number() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.BatteryState.serial_number)
  return _internal_serial_number();
}
inline void BatteryState::set_serial_number(const std::string& value) {
  _internal_set_serial_number(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.BatteryState.serial_number)
}
inline std::string* BatteryState::mutable_serial_number() {
  // @@protoc_insertion_point(field_mutable:synapse.msgs.BatteryState.serial_number)
  return _internal_mutable_serial_number();
}
inline const std::string& BatteryState::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void BatteryState::_internal_set_serial_number(const std::string& value) {
  
  serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BatteryState::set_serial_number(std::string&& value) {
  
  serial_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:synapse.msgs.BatteryState.serial_number)
}
inline void BatteryState::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:synapse.msgs.BatteryState.serial_number)
}
inline void BatteryState::set_serial_number(const char* value,
    size_t size) {
  
  serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:synapse.msgs.BatteryState.serial_number)
}
inline std::string* BatteryState::_internal_mutable_serial_number() {
  
  return serial_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BatteryState::release_serial_number() {
  // @@protoc_insertion_point(field_release:synapse.msgs.BatteryState.serial_number)
  return serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatteryState::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    
  } else {
    
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:synapse.msgs.BatteryState.serial_number)
}
inline std::string* BatteryState::unsafe_arena_release_serial_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:synapse.msgs.BatteryState.serial_number)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return serial_number_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BatteryState::unsafe_arena_set_allocated_serial_number(
    std::string* serial_number) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (serial_number != nullptr) {
    
  } else {
    
  }
  serial_number_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      serial_number, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:synapse.msgs.BatteryState.serial_number)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace synapse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::synapse::msgs::BatteryState_PowerSupplyStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::synapse::msgs::BatteryState_PowerSupplyStatus>() {
  return ::synapse::msgs::BatteryState_PowerSupplyStatus_descriptor();
}
template <> struct is_proto_enum< ::synapse::msgs::BatteryState_PowerSupplyHealth> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::synapse::msgs::BatteryState_PowerSupplyHealth>() {
  return ::synapse::msgs::BatteryState_PowerSupplyHealth_descriptor();
}
template <> struct is_proto_enum< ::synapse::msgs::BatteryState_PowerSupplyTechnology> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::synapse::msgs::BatteryState_PowerSupplyTechnology>() {
  return ::synapse::msgs::BatteryState_PowerSupplyTechnology_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_battery_5fstate_2eproto
