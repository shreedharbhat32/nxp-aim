// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battery_state.proto

#include "battery_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_header_2eproto;
namespace synapse {
namespace msgs {
class BatteryStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatteryState> _instance;
} _BatteryState_default_instance_;
}  // namespace msgs
}  // namespace synapse
static void InitDefaultsscc_info_BatteryState_battery_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::synapse::msgs::_BatteryState_default_instance_;
    new (ptr) ::synapse::msgs::BatteryState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::synapse::msgs::BatteryState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatteryState_battery_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BatteryState_battery_5fstate_2eproto}, {
      &scc_info_Header_header_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_battery_5fstate_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_battery_5fstate_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_battery_5fstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_battery_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, header_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, voltage_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, temperature_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, current_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, charge_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, capacity_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, design_capacity_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, percentage_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, power_supply_status_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, power_supply_health_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, power_supply_technology_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, present_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, cell_voltage_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, cell_temperature_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, location_),
  PROTOBUF_FIELD_OFFSET(::synapse::msgs::BatteryState, serial_number_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::synapse::msgs::BatteryState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::synapse::msgs::_BatteryState_default_instance_),
};

const char descriptor_table_protodef_battery_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023battery_state.proto\022\014synapse.msgs\032\014hea"
  "der.proto\"\245\007\n\014BatteryState\022$\n\006header\030\001 \001"
  "(\0132\024.synapse.msgs.Header\022\017\n\007voltage\030\002 \001("
  "\001\022\023\n\013temperature\030\003 \001(\001\022\017\n\007current\030\004 \001(\001\022"
  "\016\n\006charge\030\005 \001(\001\022\020\n\010capacity\030\006 \001(\001\022\027\n\017des"
  "ign_capacity\030\007 \001(\001\022\022\n\npercentage\030\010 \001(\001\022I"
  "\n\023power_supply_status\030\t \001(\0162,.synapse.ms"
  "gs.BatteryState.PowerSupplyStatus\022I\n\023pow"
  "er_supply_health\030\n \001(\0162,.synapse.msgs.Ba"
  "tteryState.PowerSupplyHealth\022Q\n\027power_su"
  "pply_technology\030\013 \001(\01620.synapse.msgs.Bat"
  "teryState.PowerSupplyTechnology\022\017\n\007prese"
  "nt\030\014 \001(\010\022\024\n\014cell_voltage\030\r \003(\001\022\030\n\020cell_t"
  "emperature\030\016 \003(\001\022\020\n\010location\030\017 \001(\t\022\025\n\rse"
  "rial_number\030\020 \001(\t\"b\n\021PowerSupplyStatus\022\022"
  "\n\016UNKNOWN_STATUS\020\000\022\014\n\010CHARGING\020\001\022\017\n\013DISC"
  "HARGING\020\002\022\020\n\014NOT_CHARGING\020\003\022\010\n\004FULL\020\004\"\254\001"
  "\n\021PowerSupplyHealth\022\022\n\016UNKNOWN_HEALTH\020\000\022"
  "\010\n\004GOOD\020\001\022\014\n\010OVERHEAT\020\002\022\010\n\004DEAD\020\003\022\017\n\013OVE"
  "RVOLTAGE\020\004\022\022\n\016UNSPEC_FAILURE\020\005\022\010\n\004COLD\020\006"
  "\022\031\n\025WATCHDOG_TIMER_EXPIRE\020\007\022\027\n\023SAFETY_TI"
  "MER_EXPIRE\020\010\"\202\001\n\025PowerSupplyTechnology\022\026"
  "\n\022UNKNOWN_TECHNOLOGY\020\000\022\010\n\004NIMH\020\001\022\010\n\004LION"
  "\020\002\022\010\n\004LIPO\020\003\022\010\n\004LIFE\020\004\022\010\n\004NICD\020\005\022\010\n\004LIMN"
  "\020\006\022\013\n\007TERNARY\020\007\022\010\n\004VRLA\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_battery_5fstate_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_battery_5fstate_2eproto_sccs[1] = {
  &scc_info_BatteryState_battery_5fstate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_battery_5fstate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_battery_5fstate_2eproto = {
  false, false, descriptor_table_protodef_battery_5fstate_2eproto, "battery_state.proto", 993,
  &descriptor_table_battery_5fstate_2eproto_once, descriptor_table_battery_5fstate_2eproto_sccs, descriptor_table_battery_5fstate_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_battery_5fstate_2eproto::offsets,
  file_level_metadata_battery_5fstate_2eproto, 1, file_level_enum_descriptors_battery_5fstate_2eproto, file_level_service_descriptors_battery_5fstate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_battery_5fstate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_battery_5fstate_2eproto)), true);
namespace synapse {
namespace msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryState_PowerSupplyStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battery_5fstate_2eproto);
  return file_level_enum_descriptors_battery_5fstate_2eproto[0];
}
bool BatteryState_PowerSupplyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BatteryState_PowerSupplyStatus BatteryState::UNKNOWN_STATUS;
constexpr BatteryState_PowerSupplyStatus BatteryState::CHARGING;
constexpr BatteryState_PowerSupplyStatus BatteryState::DISCHARGING;
constexpr BatteryState_PowerSupplyStatus BatteryState::NOT_CHARGING;
constexpr BatteryState_PowerSupplyStatus BatteryState::FULL;
constexpr BatteryState_PowerSupplyStatus BatteryState::PowerSupplyStatus_MIN;
constexpr BatteryState_PowerSupplyStatus BatteryState::PowerSupplyStatus_MAX;
constexpr int BatteryState::PowerSupplyStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryState_PowerSupplyHealth_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battery_5fstate_2eproto);
  return file_level_enum_descriptors_battery_5fstate_2eproto[1];
}
bool BatteryState_PowerSupplyHealth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BatteryState_PowerSupplyHealth BatteryState::UNKNOWN_HEALTH;
constexpr BatteryState_PowerSupplyHealth BatteryState::GOOD;
constexpr BatteryState_PowerSupplyHealth BatteryState::OVERHEAT;
constexpr BatteryState_PowerSupplyHealth BatteryState::DEAD;
constexpr BatteryState_PowerSupplyHealth BatteryState::OVERVOLTAGE;
constexpr BatteryState_PowerSupplyHealth BatteryState::UNSPEC_FAILURE;
constexpr BatteryState_PowerSupplyHealth BatteryState::COLD;
constexpr BatteryState_PowerSupplyHealth BatteryState::WATCHDOG_TIMER_EXPIRE;
constexpr BatteryState_PowerSupplyHealth BatteryState::SAFETY_TIMER_EXPIRE;
constexpr BatteryState_PowerSupplyHealth BatteryState::PowerSupplyHealth_MIN;
constexpr BatteryState_PowerSupplyHealth BatteryState::PowerSupplyHealth_MAX;
constexpr int BatteryState::PowerSupplyHealth_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryState_PowerSupplyTechnology_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battery_5fstate_2eproto);
  return file_level_enum_descriptors_battery_5fstate_2eproto[2];
}
bool BatteryState_PowerSupplyTechnology_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BatteryState_PowerSupplyTechnology BatteryState::UNKNOWN_TECHNOLOGY;
constexpr BatteryState_PowerSupplyTechnology BatteryState::NIMH;
constexpr BatteryState_PowerSupplyTechnology BatteryState::LION;
constexpr BatteryState_PowerSupplyTechnology BatteryState::LIPO;
constexpr BatteryState_PowerSupplyTechnology BatteryState::LIFE;
constexpr BatteryState_PowerSupplyTechnology BatteryState::NICD;
constexpr BatteryState_PowerSupplyTechnology BatteryState::LIMN;
constexpr BatteryState_PowerSupplyTechnology BatteryState::TERNARY;
constexpr BatteryState_PowerSupplyTechnology BatteryState::VRLA;
constexpr BatteryState_PowerSupplyTechnology BatteryState::PowerSupplyTechnology_MIN;
constexpr BatteryState_PowerSupplyTechnology BatteryState::PowerSupplyTechnology_MAX;
constexpr int BatteryState::PowerSupplyTechnology_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void BatteryState::InitAsDefaultInstance() {
  ::synapse::msgs::_BatteryState_default_instance_._instance.get_mutable()->header_ = const_cast< ::synapse::msgs::Header*>(
      ::synapse::msgs::Header::internal_default_instance());
}
class BatteryState::_Internal {
 public:
  static const ::synapse::msgs::Header& header(const BatteryState* msg);
};

const ::synapse::msgs::Header&
BatteryState::_Internal::header(const BatteryState* msg) {
  return *msg->header_;
}
void BatteryState::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
BatteryState::BatteryState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_voltage_(arena),
  cell_temperature_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:synapse.msgs.BatteryState)
}
BatteryState::BatteryState(const BatteryState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cell_voltage_(from.cell_voltage_),
      cell_temperature_(from.cell_temperature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_location().empty()) {
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location(),
      GetArena());
  }
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serial_number().empty()) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serial_number(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::synapse::msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&voltage_, &from.voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&present_) -
    reinterpret_cast<char*>(&voltage_)) + sizeof(present_));
  // @@protoc_insertion_point(copy_constructor:synapse.msgs.BatteryState)
}

void BatteryState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatteryState_battery_5fstate_2eproto.base);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&present_) -
      reinterpret_cast<char*>(&header_)) + sizeof(present_));
}

BatteryState::~BatteryState() {
  // @@protoc_insertion_point(destructor:synapse.msgs.BatteryState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatteryState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void BatteryState::ArenaDtor(void* object) {
  BatteryState* _this = reinterpret_cast< BatteryState* >(object);
  (void)_this;
}
void BatteryState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatteryState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatteryState& BatteryState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatteryState_battery_5fstate_2eproto.base);
  return *internal_default_instance();
}


void BatteryState::Clear() {
// @@protoc_insertion_point(message_clear_start:synapse.msgs.BatteryState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_voltage_.Clear();
  cell_temperature_.Clear();
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&present_) -
      reinterpret_cast<char*>(&voltage_)) + sizeof(present_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .synapse.msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double temperature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double current = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double charge = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          charge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double capacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double design_capacity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          design_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double percentage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .synapse.msgs.BatteryState.PowerSupplyStatus power_supply_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_power_supply_status(static_cast<::synapse::msgs::BatteryState_PowerSupplyStatus>(val));
        } else goto handle_unusual;
        continue;
      // .synapse.msgs.BatteryState.PowerSupplyHealth power_supply_health = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_power_supply_health(static_cast<::synapse::msgs::BatteryState_PowerSupplyHealth>(val));
        } else goto handle_unusual;
        continue;
      // .synapse.msgs.BatteryState.PowerSupplyTechnology power_supply_technology = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_power_supply_technology(static_cast<::synapse::msgs::BatteryState_PowerSupplyTechnology>(val));
        } else goto handle_unusual;
        continue;
      // bool present = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double cell_voltage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_cell_voltage(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105) {
          _internal_add_cell_voltage(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double cell_temperature = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_cell_temperature(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113) {
          _internal_add_cell_temperature(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string location = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "synapse.msgs.BatteryState.location"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serial_number = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "synapse.msgs.BatteryState.serial_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatteryState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:synapse.msgs.BatteryState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .synapse.msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // double voltage = 2;
  if (!(this->voltage() <= 0 && this->voltage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_voltage(), target);
  }

  // double temperature = 3;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_temperature(), target);
  }

  // double current = 4;
  if (!(this->current() <= 0 && this->current() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_current(), target);
  }

  // double charge = 5;
  if (!(this->charge() <= 0 && this->charge() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_charge(), target);
  }

  // double capacity = 6;
  if (!(this->capacity() <= 0 && this->capacity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_capacity(), target);
  }

  // double design_capacity = 7;
  if (!(this->design_capacity() <= 0 && this->design_capacity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_design_capacity(), target);
  }

  // double percentage = 8;
  if (!(this->percentage() <= 0 && this->percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_percentage(), target);
  }

  // .synapse.msgs.BatteryState.PowerSupplyStatus power_supply_status = 9;
  if (this->power_supply_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_power_supply_status(), target);
  }

  // .synapse.msgs.BatteryState.PowerSupplyHealth power_supply_health = 10;
  if (this->power_supply_health() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_power_supply_health(), target);
  }

  // .synapse.msgs.BatteryState.PowerSupplyTechnology power_supply_technology = 11;
  if (this->power_supply_technology() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_power_supply_technology(), target);
  }

  // bool present = 12;
  if (this->present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_present(), target);
  }

  // repeated double cell_voltage = 13;
  if (this->_internal_cell_voltage_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_cell_voltage(), target);
  }

  // repeated double cell_temperature = 14;
  if (this->_internal_cell_temperature_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_cell_temperature(), target);
  }

  // string location = 15;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "synapse.msgs.BatteryState.location");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_location(), target);
  }

  // string serial_number = 16;
  if (this->serial_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "synapse.msgs.BatteryState.serial_number");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_serial_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:synapse.msgs.BatteryState)
  return target;
}

size_t BatteryState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:synapse.msgs.BatteryState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double cell_voltage = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cell_voltage_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cell_voltage_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double cell_temperature = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cell_temperature_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cell_temperature_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string location = 15;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // string serial_number = 16;
  if (this->serial_number().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_number());
  }

  // .synapse.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // double voltage = 2;
  if (!(this->voltage() <= 0 && this->voltage() >= 0)) {
    total_size += 1 + 8;
  }

  // double temperature = 3;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    total_size += 1 + 8;
  }

  // double current = 4;
  if (!(this->current() <= 0 && this->current() >= 0)) {
    total_size += 1 + 8;
  }

  // double charge = 5;
  if (!(this->charge() <= 0 && this->charge() >= 0)) {
    total_size += 1 + 8;
  }

  // double capacity = 6;
  if (!(this->capacity() <= 0 && this->capacity() >= 0)) {
    total_size += 1 + 8;
  }

  // double design_capacity = 7;
  if (!(this->design_capacity() <= 0 && this->design_capacity() >= 0)) {
    total_size += 1 + 8;
  }

  // double percentage = 8;
  if (!(this->percentage() <= 0 && this->percentage() >= 0)) {
    total_size += 1 + 8;
  }

  // .synapse.msgs.BatteryState.PowerSupplyStatus power_supply_status = 9;
  if (this->power_supply_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_power_supply_status());
  }

  // .synapse.msgs.BatteryState.PowerSupplyHealth power_supply_health = 10;
  if (this->power_supply_health() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_power_supply_health());
  }

  // .synapse.msgs.BatteryState.PowerSupplyTechnology power_supply_technology = 11;
  if (this->power_supply_technology() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_power_supply_technology());
  }

  // bool present = 12;
  if (this->present() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:synapse.msgs.BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatteryState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:synapse.msgs.BatteryState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:synapse.msgs.BatteryState)
    MergeFrom(*source);
  }
}

void BatteryState::MergeFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:synapse.msgs.BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_voltage_.MergeFrom(from.cell_voltage_);
  cell_temperature_.MergeFrom(from.cell_temperature_);
  if (from.location().size() > 0) {
    _internal_set_location(from._internal_location());
  }
  if (from.serial_number().size() > 0) {
    _internal_set_serial_number(from._internal_serial_number());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::synapse::msgs::Header::MergeFrom(from._internal_header());
  }
  if (!(from.voltage() <= 0 && from.voltage() >= 0)) {
    _internal_set_voltage(from._internal_voltage());
  }
  if (!(from.temperature() <= 0 && from.temperature() >= 0)) {
    _internal_set_temperature(from._internal_temperature());
  }
  if (!(from.current() <= 0 && from.current() >= 0)) {
    _internal_set_current(from._internal_current());
  }
  if (!(from.charge() <= 0 && from.charge() >= 0)) {
    _internal_set_charge(from._internal_charge());
  }
  if (!(from.capacity() <= 0 && from.capacity() >= 0)) {
    _internal_set_capacity(from._internal_capacity());
  }
  if (!(from.design_capacity() <= 0 && from.design_capacity() >= 0)) {
    _internal_set_design_capacity(from._internal_design_capacity());
  }
  if (!(from.percentage() <= 0 && from.percentage() >= 0)) {
    _internal_set_percentage(from._internal_percentage());
  }
  if (from.power_supply_status() != 0) {
    _internal_set_power_supply_status(from._internal_power_supply_status());
  }
  if (from.power_supply_health() != 0) {
    _internal_set_power_supply_health(from._internal_power_supply_health());
  }
  if (from.power_supply_technology() != 0) {
    _internal_set_power_supply_technology(from._internal_power_supply_technology());
  }
  if (from.present() != 0) {
    _internal_set_present(from._internal_present());
  }
}

void BatteryState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:synapse.msgs.BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryState::CopyFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:synapse.msgs.BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryState::IsInitialized() const {
  return true;
}

void BatteryState::InternalSwap(BatteryState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cell_voltage_.InternalSwap(&other->cell_voltage_);
  cell_temperature_.InternalSwap(&other->cell_temperature_);
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatteryState, present_)
      + sizeof(BatteryState::present_)
      - PROTOBUF_FIELD_OFFSET(BatteryState, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace synapse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::synapse::msgs::BatteryState* Arena::CreateMaybeMessage< ::synapse::msgs::BatteryState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::synapse::msgs::BatteryState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
