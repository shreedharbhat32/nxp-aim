// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_status_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_status_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_status_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_status_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_status_2eproto;
namespace synapse {
namespace msgs {
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace msgs
}  // namespace synapse
PROTOBUF_NAMESPACE_OPEN
template<> ::synapse::msgs::Status* Arena::CreateMaybeMessage<::synapse::msgs::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace synapse {
namespace msgs {

enum Status_Arming : int {
  Status_Arming_ARMING_UNKNOWN = 0,
  Status_Arming_ARMING_DISARMED = 1,
  Status_Arming_ARMING_ARMED = 2,
  Status_Arming_Status_Arming_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_Arming_Status_Arming_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_Arming_IsValid(int value);
constexpr Status_Arming Status_Arming_Arming_MIN = Status_Arming_ARMING_UNKNOWN;
constexpr Status_Arming Status_Arming_Arming_MAX = Status_Arming_ARMING_ARMED;
constexpr int Status_Arming_Arming_ARRAYSIZE = Status_Arming_Arming_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_Arming_descriptor();
template<typename T>
inline const std::string& Status_Arming_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_Arming>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Arming_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_Arming_descriptor(), enum_t_value);
}
inline bool Status_Arming_Parse(
    const std::string& name, Status_Arming* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_Arming>(
    Status_Arming_descriptor(), name, value);
}
enum Status_Fuel : int {
  Status_Fuel_FUEL_UNKNOWN = 0,
  Status_Fuel_FUEL_CRITICAL = 1,
  Status_Fuel_FUEL_LOW = 2,
  Status_Fuel_FUEL_NOMINAL = 3,
  Status_Fuel_FUEL_OVER_CAPACITY = 4,
  Status_Fuel_Status_Fuel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_Fuel_Status_Fuel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_Fuel_IsValid(int value);
constexpr Status_Fuel Status_Fuel_Fuel_MIN = Status_Fuel_FUEL_UNKNOWN;
constexpr Status_Fuel Status_Fuel_Fuel_MAX = Status_Fuel_FUEL_OVER_CAPACITY;
constexpr int Status_Fuel_Fuel_ARRAYSIZE = Status_Fuel_Fuel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_Fuel_descriptor();
template<typename T>
inline const std::string& Status_Fuel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_Fuel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Fuel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_Fuel_descriptor(), enum_t_value);
}
inline bool Status_Fuel_Parse(
    const std::string& name, Status_Fuel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_Fuel>(
    Status_Fuel_descriptor(), name, value);
}
enum Status_Joy : int {
  Status_Joy_JOY_UNKNOWN = 0,
  Status_Joy_JOY_DISABLED = 1,
  Status_Joy_JOY_LOSS = 2,
  Status_Joy_JOY_NOMINAL = 3,
  Status_Joy_Status_Joy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_Joy_Status_Joy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_Joy_IsValid(int value);
constexpr Status_Joy Status_Joy_Joy_MIN = Status_Joy_JOY_UNKNOWN;
constexpr Status_Joy Status_Joy_Joy_MAX = Status_Joy_JOY_NOMINAL;
constexpr int Status_Joy_Joy_ARRAYSIZE = Status_Joy_Joy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_Joy_descriptor();
template<typename T>
inline const std::string& Status_Joy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_Joy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Joy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_Joy_descriptor(), enum_t_value);
}
inline bool Status_Joy_Parse(
    const std::string& name, Status_Joy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_Joy>(
    Status_Joy_descriptor(), name, value);
}
enum Status_Mode : int {
  Status_Mode_MODE_UNKNOWN = 0,
  Status_Mode_MODE_MANUAL = 1,
  Status_Mode_MODE_AUTO = 2,
  Status_Mode_MODE_CMD_VEL = 3,
  Status_Mode_MODE_CALIBRATION = 4,
  Status_Mode_Status_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_Mode_Status_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_Mode_IsValid(int value);
constexpr Status_Mode Status_Mode_Mode_MIN = Status_Mode_MODE_UNKNOWN;
constexpr Status_Mode Status_Mode_Mode_MAX = Status_Mode_MODE_CALIBRATION;
constexpr int Status_Mode_Mode_ARRAYSIZE = Status_Mode_Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_Mode_descriptor();
template<typename T>
inline const std::string& Status_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_Mode_descriptor(), enum_t_value);
}
inline bool Status_Mode_Parse(
    const std::string& name, Status_Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_Mode>(
    Status_Mode_descriptor(), name, value);
}
enum Status_Safety : int {
  Status_Safety_SAFETY_UNKNOWN = 0,
  Status_Safety_SAFETY_SAFE = 1,
  Status_Safety_SAFETY_UNSAFE = 2,
  Status_Safety_Status_Safety_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_Safety_Status_Safety_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_Safety_IsValid(int value);
constexpr Status_Safety Status_Safety_Safety_MIN = Status_Safety_SAFETY_UNKNOWN;
constexpr Status_Safety Status_Safety_Safety_MAX = Status_Safety_SAFETY_UNSAFE;
constexpr int Status_Safety_Safety_ARRAYSIZE = Status_Safety_Safety_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_Safety_descriptor();
template<typename T>
inline const std::string& Status_Safety_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_Safety>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Safety_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_Safety_descriptor(), enum_t_value);
}
inline bool Status_Safety_Parse(
    const std::string& name, Status_Safety* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_Safety>(
    Status_Safety_descriptor(), name, value);
}
enum Status_Synapse : int {
  Status_Synapse_SYNAPSE_UNKNOWN = 0,
  Status_Synapse_SYNAPSE_DISABLED = 1,
  Status_Synapse_SYNAPSE_LOSS = 2,
  Status_Synapse_SYNAPSE_NOMINAL = 3,
  Status_Synapse_Status_Synapse_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_Synapse_Status_Synapse_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_Synapse_IsValid(int value);
constexpr Status_Synapse Status_Synapse_Synapse_MIN = Status_Synapse_SYNAPSE_UNKNOWN;
constexpr Status_Synapse Status_Synapse_Synapse_MAX = Status_Synapse_SYNAPSE_NOMINAL;
constexpr int Status_Synapse_Synapse_ARRAYSIZE = Status_Synapse_Synapse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_Synapse_descriptor();
template<typename T>
inline const std::string& Status_Synapse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_Synapse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Synapse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_Synapse_descriptor(), enum_t_value);
}
inline bool Status_Synapse_Parse(
    const std::string& name, Status_Synapse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_Synapse>(
    Status_Synapse_descriptor(), name, value);
}
// ===================================================================

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:synapse.msgs.Status) */ {
 public:
  inline Status() : Status(nullptr) {};
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "synapse.msgs.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_status_2eproto);
    return ::descriptor_table_status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Status_Arming Arming;
  static constexpr Arming ARMING_UNKNOWN =
    Status_Arming_ARMING_UNKNOWN;
  static constexpr Arming ARMING_DISARMED =
    Status_Arming_ARMING_DISARMED;
  static constexpr Arming ARMING_ARMED =
    Status_Arming_ARMING_ARMED;
  static inline bool Arming_IsValid(int value) {
    return Status_Arming_IsValid(value);
  }
  static constexpr Arming Arming_MIN =
    Status_Arming_Arming_MIN;
  static constexpr Arming Arming_MAX =
    Status_Arming_Arming_MAX;
  static constexpr int Arming_ARRAYSIZE =
    Status_Arming_Arming_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Arming_descriptor() {
    return Status_Arming_descriptor();
  }
  template<typename T>
  static inline const std::string& Arming_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Arming>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Arming_Name.");
    return Status_Arming_Name(enum_t_value);
  }
  static inline bool Arming_Parse(const std::string& name,
      Arming* value) {
    return Status_Arming_Parse(name, value);
  }

  typedef Status_Fuel Fuel;
  static constexpr Fuel FUEL_UNKNOWN =
    Status_Fuel_FUEL_UNKNOWN;
  static constexpr Fuel FUEL_CRITICAL =
    Status_Fuel_FUEL_CRITICAL;
  static constexpr Fuel FUEL_LOW =
    Status_Fuel_FUEL_LOW;
  static constexpr Fuel FUEL_NOMINAL =
    Status_Fuel_FUEL_NOMINAL;
  static constexpr Fuel FUEL_OVER_CAPACITY =
    Status_Fuel_FUEL_OVER_CAPACITY;
  static inline bool Fuel_IsValid(int value) {
    return Status_Fuel_IsValid(value);
  }
  static constexpr Fuel Fuel_MIN =
    Status_Fuel_Fuel_MIN;
  static constexpr Fuel Fuel_MAX =
    Status_Fuel_Fuel_MAX;
  static constexpr int Fuel_ARRAYSIZE =
    Status_Fuel_Fuel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Fuel_descriptor() {
    return Status_Fuel_descriptor();
  }
  template<typename T>
  static inline const std::string& Fuel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Fuel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Fuel_Name.");
    return Status_Fuel_Name(enum_t_value);
  }
  static inline bool Fuel_Parse(const std::string& name,
      Fuel* value) {
    return Status_Fuel_Parse(name, value);
  }

  typedef Status_Joy Joy;
  static constexpr Joy JOY_UNKNOWN =
    Status_Joy_JOY_UNKNOWN;
  static constexpr Joy JOY_DISABLED =
    Status_Joy_JOY_DISABLED;
  static constexpr Joy JOY_LOSS =
    Status_Joy_JOY_LOSS;
  static constexpr Joy JOY_NOMINAL =
    Status_Joy_JOY_NOMINAL;
  static inline bool Joy_IsValid(int value) {
    return Status_Joy_IsValid(value);
  }
  static constexpr Joy Joy_MIN =
    Status_Joy_Joy_MIN;
  static constexpr Joy Joy_MAX =
    Status_Joy_Joy_MAX;
  static constexpr int Joy_ARRAYSIZE =
    Status_Joy_Joy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Joy_descriptor() {
    return Status_Joy_descriptor();
  }
  template<typename T>
  static inline const std::string& Joy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Joy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Joy_Name.");
    return Status_Joy_Name(enum_t_value);
  }
  static inline bool Joy_Parse(const std::string& name,
      Joy* value) {
    return Status_Joy_Parse(name, value);
  }

  typedef Status_Mode Mode;
  static constexpr Mode MODE_UNKNOWN =
    Status_Mode_MODE_UNKNOWN;
  static constexpr Mode MODE_MANUAL =
    Status_Mode_MODE_MANUAL;
  static constexpr Mode MODE_AUTO =
    Status_Mode_MODE_AUTO;
  static constexpr Mode MODE_CMD_VEL =
    Status_Mode_MODE_CMD_VEL;
  static constexpr Mode MODE_CALIBRATION =
    Status_Mode_MODE_CALIBRATION;
  static inline bool Mode_IsValid(int value) {
    return Status_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    Status_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    Status_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    Status_Mode_Mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Mode_descriptor() {
    return Status_Mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return Status_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(const std::string& name,
      Mode* value) {
    return Status_Mode_Parse(name, value);
  }

  typedef Status_Safety Safety;
  static constexpr Safety SAFETY_UNKNOWN =
    Status_Safety_SAFETY_UNKNOWN;
  static constexpr Safety SAFETY_SAFE =
    Status_Safety_SAFETY_SAFE;
  static constexpr Safety SAFETY_UNSAFE =
    Status_Safety_SAFETY_UNSAFE;
  static inline bool Safety_IsValid(int value) {
    return Status_Safety_IsValid(value);
  }
  static constexpr Safety Safety_MIN =
    Status_Safety_Safety_MIN;
  static constexpr Safety Safety_MAX =
    Status_Safety_Safety_MAX;
  static constexpr int Safety_ARRAYSIZE =
    Status_Safety_Safety_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Safety_descriptor() {
    return Status_Safety_descriptor();
  }
  template<typename T>
  static inline const std::string& Safety_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Safety>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Safety_Name.");
    return Status_Safety_Name(enum_t_value);
  }
  static inline bool Safety_Parse(const std::string& name,
      Safety* value) {
    return Status_Safety_Parse(name, value);
  }

  typedef Status_Synapse Synapse;
  static constexpr Synapse SYNAPSE_UNKNOWN =
    Status_Synapse_SYNAPSE_UNKNOWN;
  static constexpr Synapse SYNAPSE_DISABLED =
    Status_Synapse_SYNAPSE_DISABLED;
  static constexpr Synapse SYNAPSE_LOSS =
    Status_Synapse_SYNAPSE_LOSS;
  static constexpr Synapse SYNAPSE_NOMINAL =
    Status_Synapse_SYNAPSE_NOMINAL;
  static inline bool Synapse_IsValid(int value) {
    return Status_Synapse_IsValid(value);
  }
  static constexpr Synapse Synapse_MIN =
    Status_Synapse_Synapse_MIN;
  static constexpr Synapse Synapse_MAX =
    Status_Synapse_Synapse_MAX;
  static constexpr int Synapse_ARRAYSIZE =
    Status_Synapse_Synapse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Synapse_descriptor() {
    return Status_Synapse_descriptor();
  }
  template<typename T>
  static inline const std::string& Synapse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Synapse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Synapse_Name.");
    return Status_Synapse_Name(enum_t_value);
  }
  static inline bool Synapse_Parse(const std::string& name,
      Synapse* value) {
    return Status_Synapse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusMessageFieldNumber = 8,
    kHeaderFieldNumber = 1,
    kArmingFieldNumber = 2,
    kJoyFieldNumber = 3,
    kFuelFieldNumber = 4,
    kModeFieldNumber = 5,
    kSafetyFieldNumber = 6,
    kSynapseFieldNumber = 7,
    kFuelPercentageFieldNumber = 9,
    kPowerFieldNumber = 10,
    kRequestSeqFieldNumber = 11,
    kRequestRejectedFieldNumber = 12,
  };
  // string status_message = 8;
  void clear_status_message();
  const std::string& status_message() const;
  void set_status_message(const std::string& value);
  void set_status_message(std::string&& value);
  void set_status_message(const char* value);
  void set_status_message(const char* value, size_t size);
  std::string* mutable_status_message();
  std::string* release_status_message();
  void set_allocated_status_message(std::string* status_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status_message(
      std::string* status_message);
  private:
  const std::string& _internal_status_message() const;
  void _internal_set_status_message(const std::string& value);
  std::string* _internal_mutable_status_message();
  public:

  // .synapse.msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::synapse::msgs::Header& header() const;
  ::synapse::msgs::Header* release_header();
  ::synapse::msgs::Header* mutable_header();
  void set_allocated_header(::synapse::msgs::Header* header);
  private:
  const ::synapse::msgs::Header& _internal_header() const;
  ::synapse::msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::synapse::msgs::Header* header);
  ::synapse::msgs::Header* unsafe_arena_release_header();

  // .synapse.msgs.Status.Arming arming = 2;
  void clear_arming();
  ::synapse::msgs::Status_Arming arming() const;
  void set_arming(::synapse::msgs::Status_Arming value);
  private:
  ::synapse::msgs::Status_Arming _internal_arming() const;
  void _internal_set_arming(::synapse::msgs::Status_Arming value);
  public:

  // .synapse.msgs.Status.Joy joy = 3;
  void clear_joy();
  ::synapse::msgs::Status_Joy joy() const;
  void set_joy(::synapse::msgs::Status_Joy value);
  private:
  ::synapse::msgs::Status_Joy _internal_joy() const;
  void _internal_set_joy(::synapse::msgs::Status_Joy value);
  public:

  // .synapse.msgs.Status.Fuel fuel = 4;
  void clear_fuel();
  ::synapse::msgs::Status_Fuel fuel() const;
  void set_fuel(::synapse::msgs::Status_Fuel value);
  private:
  ::synapse::msgs::Status_Fuel _internal_fuel() const;
  void _internal_set_fuel(::synapse::msgs::Status_Fuel value);
  public:

  // .synapse.msgs.Status.Mode mode = 5;
  void clear_mode();
  ::synapse::msgs::Status_Mode mode() const;
  void set_mode(::synapse::msgs::Status_Mode value);
  private:
  ::synapse::msgs::Status_Mode _internal_mode() const;
  void _internal_set_mode(::synapse::msgs::Status_Mode value);
  public:

  // .synapse.msgs.Status.Safety safety = 6;
  void clear_safety();
  ::synapse::msgs::Status_Safety safety() const;
  void set_safety(::synapse::msgs::Status_Safety value);
  private:
  ::synapse::msgs::Status_Safety _internal_safety() const;
  void _internal_set_safety(::synapse::msgs::Status_Safety value);
  public:

  // .synapse.msgs.Status.Synapse synapse = 7;
  void clear_synapse();
  ::synapse::msgs::Status_Synapse synapse() const;
  void set_synapse(::synapse::msgs::Status_Synapse value);
  private:
  ::synapse::msgs::Status_Synapse _internal_synapse() const;
  void _internal_set_synapse(::synapse::msgs::Status_Synapse value);
  public:

  // uint32 fuel_percentage = 9;
  void clear_fuel_percentage();
  ::PROTOBUF_NAMESPACE_ID::uint32 fuel_percentage() const;
  void set_fuel_percentage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fuel_percentage() const;
  void _internal_set_fuel_percentage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float power = 10;
  void clear_power();
  float power() const;
  void set_power(float value);
  private:
  float _internal_power() const;
  void _internal_set_power(float value);
  public:

  // uint32 request_seq = 11;
  void clear_request_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_seq() const;
  void set_request_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_seq() const;
  void _internal_set_request_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool request_rejected = 12;
  void clear_request_rejected();
  bool request_rejected() const;
  void set_request_rejected(bool value);
  private:
  bool _internal_request_rejected() const;
  void _internal_set_request_rejected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:synapse.msgs.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_message_;
  ::synapse::msgs::Header* header_;
  int arming_;
  int joy_;
  int fuel_;
  int mode_;
  int safety_;
  int synapse_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fuel_percentage_;
  float power_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_seq_;
  bool request_rejected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_status_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Status

// .synapse.msgs.Header header = 1;
inline bool Status::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Status::has_header() const {
  return _internal_has_header();
}
inline const ::synapse::msgs::Header& Status::_internal_header() const {
  const ::synapse::msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::synapse::msgs::Header*>(
      &::synapse::msgs::_Header_default_instance_);
}
inline const ::synapse::msgs::Header& Status::header() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Status.header)
  return _internal_header();
}
inline void Status::unsafe_arena_set_allocated_header(
    ::synapse::msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:synapse.msgs.Status.header)
}
inline ::synapse::msgs::Header* Status::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::synapse::msgs::Header* Status::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:synapse.msgs.Status.header)
  
  ::synapse::msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::synapse::msgs::Header* Status::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::synapse::msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::synapse::msgs::Header* Status::mutable_header() {
  // @@protoc_insertion_point(field_mutable:synapse.msgs.Status.header)
  return _internal_mutable_header();
}
inline void Status::set_allocated_header(::synapse::msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:synapse.msgs.Status.header)
}

// .synapse.msgs.Status.Arming arming = 2;
inline void Status::clear_arming() {
  arming_ = 0;
}
inline ::synapse::msgs::Status_Arming Status::_internal_arming() const {
  return static_cast< ::synapse::msgs::Status_Arming >(arming_);
}
inline ::synapse::msgs::Status_Arming Status::arming() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Status.arming)
  return _internal_arming();
}
inline void Status::_internal_set_arming(::synapse::msgs::Status_Arming value) {
  
  arming_ = value;
}
inline void Status::set_arming(::synapse::msgs::Status_Arming value) {
  _internal_set_arming(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Status.arming)
}

// .synapse.msgs.Status.Joy joy = 3;
inline void Status::clear_joy() {
  joy_ = 0;
}
inline ::synapse::msgs::Status_Joy Status::_internal_joy() const {
  return static_cast< ::synapse::msgs::Status_Joy >(joy_);
}
inline ::synapse::msgs::Status_Joy Status::joy() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Status.joy)
  return _internal_joy();
}
inline void Status::_internal_set_joy(::synapse::msgs::Status_Joy value) {
  
  joy_ = value;
}
inline void Status::set_joy(::synapse::msgs::Status_Joy value) {
  _internal_set_joy(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Status.joy)
}

// .synapse.msgs.Status.Fuel fuel = 4;
inline void Status::clear_fuel() {
  fuel_ = 0;
}
inline ::synapse::msgs::Status_Fuel Status::_internal_fuel() const {
  return static_cast< ::synapse::msgs::Status_Fuel >(fuel_);
}
inline ::synapse::msgs::Status_Fuel Status::fuel() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Status.fuel)
  return _internal_fuel();
}
inline void Status::_internal_set_fuel(::synapse::msgs::Status_Fuel value) {
  
  fuel_ = value;
}
inline void Status::set_fuel(::synapse::msgs::Status_Fuel value) {
  _internal_set_fuel(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Status.fuel)
}

// .synapse.msgs.Status.Mode mode = 5;
inline void Status::clear_mode() {
  mode_ = 0;
}
inline ::synapse::msgs::Status_Mode Status::_internal_mode() const {
  return static_cast< ::synapse::msgs::Status_Mode >(mode_);
}
inline ::synapse::msgs::Status_Mode Status::mode() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Status.mode)
  return _internal_mode();
}
inline void Status::_internal_set_mode(::synapse::msgs::Status_Mode value) {
  
  mode_ = value;
}
inline void Status::set_mode(::synapse::msgs::Status_Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Status.mode)
}

// .synapse.msgs.Status.Safety safety = 6;
inline void Status::clear_safety() {
  safety_ = 0;
}
inline ::synapse::msgs::Status_Safety Status::_internal_safety() const {
  return static_cast< ::synapse::msgs::Status_Safety >(safety_);
}
inline ::synapse::msgs::Status_Safety Status::safety() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Status.safety)
  return _internal_safety();
}
inline void Status::_internal_set_safety(::synapse::msgs::Status_Safety value) {
  
  safety_ = value;
}
inline void Status::set_safety(::synapse::msgs::Status_Safety value) {
  _internal_set_safety(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Status.safety)
}

// .synapse.msgs.Status.Synapse synapse = 7;
inline void Status::clear_synapse() {
  synapse_ = 0;
}
inline ::synapse::msgs::Status_Synapse Status::_internal_synapse() const {
  return static_cast< ::synapse::msgs::Status_Synapse >(synapse_);
}
inline ::synapse::msgs::Status_Synapse Status::synapse() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Status.synapse)
  return _internal_synapse();
}
inline void Status::_internal_set_synapse(::synapse::msgs::Status_Synapse value) {
  
  synapse_ = value;
}
inline void Status::set_synapse(::synapse::msgs::Status_Synapse value) {
  _internal_set_synapse(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Status.synapse)
}

// string status_message = 8;
inline void Status::clear_status_message() {
  status_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Status::status_message() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Status.status_message)
  return _internal_status_message();
}
inline void Status::set_status_message(const std::string& value) {
  _internal_set_status_message(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Status.status_message)
}
inline std::string* Status::mutable_status_message() {
  // @@protoc_insertion_point(field_mutable:synapse.msgs.Status.status_message)
  return _internal_mutable_status_message();
}
inline const std::string& Status::_internal_status_message() const {
  return status_message_.Get();
}
inline void Status::_internal_set_status_message(const std::string& value) {
  
  status_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Status::set_status_message(std::string&& value) {
  
  status_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:synapse.msgs.Status.status_message)
}
inline void Status::set_status_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:synapse.msgs.Status.status_message)
}
inline void Status::set_status_message(const char* value,
    size_t size) {
  
  status_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:synapse.msgs.Status.status_message)
}
inline std::string* Status::_internal_mutable_status_message() {
  
  return status_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Status::release_status_message() {
  // @@protoc_insertion_point(field_release:synapse.msgs.Status.status_message)
  return status_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_status_message(std::string* status_message) {
  if (status_message != nullptr) {
    
  } else {
    
  }
  status_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:synapse.msgs.Status.status_message)
}
inline std::string* Status::unsafe_arena_release_status_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:synapse.msgs.Status.status_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Status::unsafe_arena_set_allocated_status_message(
    std::string* status_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status_message != nullptr) {
    
  } else {
    
  }
  status_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:synapse.msgs.Status.status_message)
}

// uint32 fuel_percentage = 9;
inline void Status::clear_fuel_percentage() {
  fuel_percentage_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::_internal_fuel_percentage() const {
  return fuel_percentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::fuel_percentage() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Status.fuel_percentage)
  return _internal_fuel_percentage();
}
inline void Status::_internal_set_fuel_percentage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fuel_percentage_ = value;
}
inline void Status::set_fuel_percentage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fuel_percentage(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Status.fuel_percentage)
}

// float power = 10;
inline void Status::clear_power() {
  power_ = 0;
}
inline float Status::_internal_power() const {
  return power_;
}
inline float Status::power() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Status.power)
  return _internal_power();
}
inline void Status::_internal_set_power(float value) {
  
  power_ = value;
}
inline void Status::set_power(float value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Status.power)
}

// uint32 request_seq = 11;
inline void Status::clear_request_seq() {
  request_seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::_internal_request_seq() const {
  return request_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::request_seq() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Status.request_seq)
  return _internal_request_seq();
}
inline void Status::_internal_set_request_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_seq_ = value;
}
inline void Status::set_request_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_seq(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Status.request_seq)
}

// bool request_rejected = 12;
inline void Status::clear_request_rejected() {
  request_rejected_ = false;
}
inline bool Status::_internal_request_rejected() const {
  return request_rejected_;
}
inline bool Status::request_rejected() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Status.request_rejected)
  return _internal_request_rejected();
}
inline void Status::_internal_set_request_rejected(bool value) {
  
  request_rejected_ = value;
}
inline void Status::set_request_rejected(bool value) {
  _internal_set_request_rejected(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Status.request_rejected)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace synapse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::synapse::msgs::Status_Arming> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::synapse::msgs::Status_Arming>() {
  return ::synapse::msgs::Status_Arming_descriptor();
}
template <> struct is_proto_enum< ::synapse::msgs::Status_Fuel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::synapse::msgs::Status_Fuel>() {
  return ::synapse::msgs::Status_Fuel_descriptor();
}
template <> struct is_proto_enum< ::synapse::msgs::Status_Joy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::synapse::msgs::Status_Joy>() {
  return ::synapse::msgs::Status_Joy_descriptor();
}
template <> struct is_proto_enum< ::synapse::msgs::Status_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::synapse::msgs::Status_Mode>() {
  return ::synapse::msgs::Status_Mode_descriptor();
}
template <> struct is_proto_enum< ::synapse::msgs::Status_Safety> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::synapse::msgs::Status_Safety>() {
  return ::synapse::msgs::Status_Safety_descriptor();
}
template <> struct is_proto_enum< ::synapse::msgs::Status_Synapse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::synapse::msgs::Status_Synapse>() {
  return ::synapse::msgs::Status_Synapse_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_status_2eproto
