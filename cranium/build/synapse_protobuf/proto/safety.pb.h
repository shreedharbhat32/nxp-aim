// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: safety.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_safety_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_safety_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_safety_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_safety_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_safety_2eproto;
namespace synapse {
namespace msgs {
class Safety;
class SafetyDefaultTypeInternal;
extern SafetyDefaultTypeInternal _Safety_default_instance_;
}  // namespace msgs
}  // namespace synapse
PROTOBUF_NAMESPACE_OPEN
template<> ::synapse::msgs::Safety* Arena::CreateMaybeMessage<::synapse::msgs::Safety>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace synapse {
namespace msgs {

enum Safety_Status : int {
  Safety_Status_SAFETY_UNKNOWN = 0,
  Safety_Status_SAFETY_SAFE = 1,
  Safety_Status_SAFETY_UNSAFE = 2,
  Safety_Status_Safety_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Safety_Status_Safety_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Safety_Status_IsValid(int value);
constexpr Safety_Status Safety_Status_Status_MIN = Safety_Status_SAFETY_UNKNOWN;
constexpr Safety_Status Safety_Status_Status_MAX = Safety_Status_SAFETY_UNSAFE;
constexpr int Safety_Status_Status_ARRAYSIZE = Safety_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Safety_Status_descriptor();
template<typename T>
inline const std::string& Safety_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Safety_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Safety_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Safety_Status_descriptor(), enum_t_value);
}
inline bool Safety_Status_Parse(
    const std::string& name, Safety_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Safety_Status>(
    Safety_Status_descriptor(), name, value);
}
// ===================================================================

class Safety PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:synapse.msgs.Safety) */ {
 public:
  inline Safety() : Safety(nullptr) {};
  virtual ~Safety();

  Safety(const Safety& from);
  Safety(Safety&& from) noexcept
    : Safety() {
    *this = ::std::move(from);
  }

  inline Safety& operator=(const Safety& from) {
    CopyFrom(from);
    return *this;
  }
  inline Safety& operator=(Safety&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Safety& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Safety* internal_default_instance() {
    return reinterpret_cast<const Safety*>(
               &_Safety_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Safety& a, Safety& b) {
    a.Swap(&b);
  }
  inline void Swap(Safety* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Safety* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Safety* New() const final {
    return CreateMaybeMessage<Safety>(nullptr);
  }

  Safety* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Safety>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Safety& from);
  void MergeFrom(const Safety& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Safety* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "synapse.msgs.Safety";
  }
  protected:
  explicit Safety(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_safety_2eproto);
    return ::descriptor_table_safety_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Safety_Status Status;
  static constexpr Status SAFETY_UNKNOWN =
    Safety_Status_SAFETY_UNKNOWN;
  static constexpr Status SAFETY_SAFE =
    Safety_Status_SAFETY_SAFE;
  static constexpr Status SAFETY_UNSAFE =
    Safety_Status_SAFETY_UNSAFE;
  static inline bool Status_IsValid(int value) {
    return Safety_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Safety_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Safety_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Safety_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Safety_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Safety_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return Safety_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .synapse.msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::synapse::msgs::Header& header() const;
  ::synapse::msgs::Header* release_header();
  ::synapse::msgs::Header* mutable_header();
  void set_allocated_header(::synapse::msgs::Header* header);
  private:
  const ::synapse::msgs::Header& _internal_header() const;
  ::synapse::msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::synapse::msgs::Header* header);
  ::synapse::msgs::Header* unsafe_arena_release_header();

  // .synapse.msgs.Safety.Status status = 2;
  void clear_status();
  ::synapse::msgs::Safety_Status status() const;
  void set_status(::synapse::msgs::Safety_Status value);
  private:
  ::synapse::msgs::Safety_Status _internal_status() const;
  void _internal_set_status(::synapse::msgs::Safety_Status value);
  public:

  // @@protoc_insertion_point(class_scope:synapse.msgs.Safety)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::synapse::msgs::Header* header_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_safety_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Safety

// .synapse.msgs.Header header = 1;
inline bool Safety::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Safety::has_header() const {
  return _internal_has_header();
}
inline const ::synapse::msgs::Header& Safety::_internal_header() const {
  const ::synapse::msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::synapse::msgs::Header*>(
      &::synapse::msgs::_Header_default_instance_);
}
inline const ::synapse::msgs::Header& Safety::header() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Safety.header)
  return _internal_header();
}
inline void Safety::unsafe_arena_set_allocated_header(
    ::synapse::msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:synapse.msgs.Safety.header)
}
inline ::synapse::msgs::Header* Safety::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::synapse::msgs::Header* Safety::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:synapse.msgs.Safety.header)
  
  ::synapse::msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::synapse::msgs::Header* Safety::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::synapse::msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::synapse::msgs::Header* Safety::mutable_header() {
  // @@protoc_insertion_point(field_mutable:synapse.msgs.Safety.header)
  return _internal_mutable_header();
}
inline void Safety::set_allocated_header(::synapse::msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:synapse.msgs.Safety.header)
}

// .synapse.msgs.Safety.Status status = 2;
inline void Safety::clear_status() {
  status_ = 0;
}
inline ::synapse::msgs::Safety_Status Safety::_internal_status() const {
  return static_cast< ::synapse::msgs::Safety_Status >(status_);
}
inline ::synapse::msgs::Safety_Status Safety::status() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.Safety.status)
  return _internal_status();
}
inline void Safety::_internal_set_status(::synapse::msgs::Safety_Status value) {
  
  status_ = value;
}
inline void Safety::set_status(::synapse::msgs::Safety_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.Safety.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace synapse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::synapse::msgs::Safety_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::synapse::msgs::Safety_Status>() {
  return ::synapse::msgs::Safety_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_safety_2eproto
