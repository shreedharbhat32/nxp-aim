// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nav_sat_fix.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nav_5fsat_5ffix_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nav_5fsat_5ffix_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "nav_sat_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nav_5fsat_5ffix_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nav_5fsat_5ffix_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nav_5fsat_5ffix_2eproto;
namespace synapse {
namespace msgs {
class NavSatFix;
class NavSatFixDefaultTypeInternal;
extern NavSatFixDefaultTypeInternal _NavSatFix_default_instance_;
}  // namespace msgs
}  // namespace synapse
PROTOBUF_NAMESPACE_OPEN
template<> ::synapse::msgs::NavSatFix* Arena::CreateMaybeMessage<::synapse::msgs::NavSatFix>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace synapse {
namespace msgs {

// ===================================================================

class NavSatFix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:synapse.msgs.NavSatFix) */ {
 public:
  inline NavSatFix() : NavSatFix(nullptr) {};
  virtual ~NavSatFix();

  NavSatFix(const NavSatFix& from);
  NavSatFix(NavSatFix&& from) noexcept
    : NavSatFix() {
    *this = ::std::move(from);
  }

  inline NavSatFix& operator=(const NavSatFix& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavSatFix& operator=(NavSatFix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavSatFix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavSatFix* internal_default_instance() {
    return reinterpret_cast<const NavSatFix*>(
               &_NavSatFix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NavSatFix& a, NavSatFix& b) {
    a.Swap(&b);
  }
  inline void Swap(NavSatFix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavSatFix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavSatFix* New() const final {
    return CreateMaybeMessage<NavSatFix>(nullptr);
  }

  NavSatFix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavSatFix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavSatFix& from);
  void MergeFrom(const NavSatFix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavSatFix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "synapse.msgs.NavSatFix";
  }
  protected:
  explicit NavSatFix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nav_5fsat_5ffix_2eproto);
    return ::descriptor_table_nav_5fsat_5ffix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionCovarianceFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
    kLatitudeFieldNumber = 3,
    kLongitudeFieldNumber = 4,
    kAltitudeFieldNumber = 5,
    kPositionCovarianceTypeFieldNumber = 7,
  };
  // repeated double position_covariance = 6;
  int position_covariance_size() const;
  private:
  int _internal_position_covariance_size() const;
  public:
  void clear_position_covariance();
  private:
  double _internal_position_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position_covariance() const;
  void _internal_add_position_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position_covariance();
  public:
  double position_covariance(int index) const;
  void set_position_covariance(int index, double value);
  void add_position_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position_covariance();

  // .synapse.msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::synapse::msgs::Header& header() const;
  ::synapse::msgs::Header* release_header();
  ::synapse::msgs::Header* mutable_header();
  void set_allocated_header(::synapse::msgs::Header* header);
  private:
  const ::synapse::msgs::Header& _internal_header() const;
  ::synapse::msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::synapse::msgs::Header* header);
  ::synapse::msgs::Header* unsafe_arena_release_header();

  // .synapse.msgs.NavSatStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::synapse::msgs::NavSatStatus& status() const;
  ::synapse::msgs::NavSatStatus* release_status();
  ::synapse::msgs::NavSatStatus* mutable_status();
  void set_allocated_status(::synapse::msgs::NavSatStatus* status);
  private:
  const ::synapse::msgs::NavSatStatus& _internal_status() const;
  ::synapse::msgs::NavSatStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::synapse::msgs::NavSatStatus* status);
  ::synapse::msgs::NavSatStatus* unsafe_arena_release_status();

  // double latitude = 3;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 4;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double altitude = 5;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // uint32 position_covariance_type = 7;
  void clear_position_covariance_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 position_covariance_type() const;
  void set_position_covariance_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position_covariance_type() const;
  void _internal_set_position_covariance_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:synapse.msgs.NavSatFix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_covariance_;
  mutable std::atomic<int> _position_covariance_cached_byte_size_;
  ::synapse::msgs::Header* header_;
  ::synapse::msgs::NavSatStatus* status_;
  double latitude_;
  double longitude_;
  double altitude_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_covariance_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nav_5fsat_5ffix_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NavSatFix

// .synapse.msgs.Header header = 1;
inline bool NavSatFix::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool NavSatFix::has_header() const {
  return _internal_has_header();
}
inline const ::synapse::msgs::Header& NavSatFix::_internal_header() const {
  const ::synapse::msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::synapse::msgs::Header*>(
      &::synapse::msgs::_Header_default_instance_);
}
inline const ::synapse::msgs::Header& NavSatFix::header() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.NavSatFix.header)
  return _internal_header();
}
inline void NavSatFix::unsafe_arena_set_allocated_header(
    ::synapse::msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:synapse.msgs.NavSatFix.header)
}
inline ::synapse::msgs::Header* NavSatFix::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::synapse::msgs::Header* NavSatFix::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:synapse.msgs.NavSatFix.header)
  
  ::synapse::msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::synapse::msgs::Header* NavSatFix::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::synapse::msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::synapse::msgs::Header* NavSatFix::mutable_header() {
  // @@protoc_insertion_point(field_mutable:synapse.msgs.NavSatFix.header)
  return _internal_mutable_header();
}
inline void NavSatFix::set_allocated_header(::synapse::msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:synapse.msgs.NavSatFix.header)
}

// .synapse.msgs.NavSatStatus status = 2;
inline bool NavSatFix::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool NavSatFix::has_status() const {
  return _internal_has_status();
}
inline const ::synapse::msgs::NavSatStatus& NavSatFix::_internal_status() const {
  const ::synapse::msgs::NavSatStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::synapse::msgs::NavSatStatus*>(
      &::synapse::msgs::_NavSatStatus_default_instance_);
}
inline const ::synapse::msgs::NavSatStatus& NavSatFix::status() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.NavSatFix.status)
  return _internal_status();
}
inline void NavSatFix::unsafe_arena_set_allocated_status(
    ::synapse::msgs::NavSatStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:synapse.msgs.NavSatFix.status)
}
inline ::synapse::msgs::NavSatStatus* NavSatFix::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::synapse::msgs::NavSatStatus* NavSatFix::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:synapse.msgs.NavSatFix.status)
  
  ::synapse::msgs::NavSatStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::synapse::msgs::NavSatStatus* NavSatFix::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::synapse::msgs::NavSatStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::synapse::msgs::NavSatStatus* NavSatFix::mutable_status() {
  // @@protoc_insertion_point(field_mutable:synapse.msgs.NavSatFix.status)
  return _internal_mutable_status();
}
inline void NavSatFix::set_allocated_status(::synapse::msgs::NavSatStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:synapse.msgs.NavSatFix.status)
}

// double latitude = 3;
inline void NavSatFix::clear_latitude() {
  latitude_ = 0;
}
inline double NavSatFix::_internal_latitude() const {
  return latitude_;
}
inline double NavSatFix::latitude() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.NavSatFix.latitude)
  return _internal_latitude();
}
inline void NavSatFix::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void NavSatFix::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.NavSatFix.latitude)
}

// double longitude = 4;
inline void NavSatFix::clear_longitude() {
  longitude_ = 0;
}
inline double NavSatFix::_internal_longitude() const {
  return longitude_;
}
inline double NavSatFix::longitude() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.NavSatFix.longitude)
  return _internal_longitude();
}
inline void NavSatFix::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void NavSatFix::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.NavSatFix.longitude)
}

// double altitude = 5;
inline void NavSatFix::clear_altitude() {
  altitude_ = 0;
}
inline double NavSatFix::_internal_altitude() const {
  return altitude_;
}
inline double NavSatFix::altitude() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.NavSatFix.altitude)
  return _internal_altitude();
}
inline void NavSatFix::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void NavSatFix::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.NavSatFix.altitude)
}

// repeated double position_covariance = 6;
inline int NavSatFix::_internal_position_covariance_size() const {
  return position_covariance_.size();
}
inline int NavSatFix::position_covariance_size() const {
  return _internal_position_covariance_size();
}
inline void NavSatFix::clear_position_covariance() {
  position_covariance_.Clear();
}
inline double NavSatFix::_internal_position_covariance(int index) const {
  return position_covariance_.Get(index);
}
inline double NavSatFix::position_covariance(int index) const {
  // @@protoc_insertion_point(field_get:synapse.msgs.NavSatFix.position_covariance)
  return _internal_position_covariance(index);
}
inline void NavSatFix::set_position_covariance(int index, double value) {
  position_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:synapse.msgs.NavSatFix.position_covariance)
}
inline void NavSatFix::_internal_add_position_covariance(double value) {
  position_covariance_.Add(value);
}
inline void NavSatFix::add_position_covariance(double value) {
  _internal_add_position_covariance(value);
  // @@protoc_insertion_point(field_add:synapse.msgs.NavSatFix.position_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NavSatFix::_internal_position_covariance() const {
  return position_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NavSatFix::position_covariance() const {
  // @@protoc_insertion_point(field_list:synapse.msgs.NavSatFix.position_covariance)
  return _internal_position_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NavSatFix::_internal_mutable_position_covariance() {
  return &position_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NavSatFix::mutable_position_covariance() {
  // @@protoc_insertion_point(field_mutable_list:synapse.msgs.NavSatFix.position_covariance)
  return _internal_mutable_position_covariance();
}

// uint32 position_covariance_type = 7;
inline void NavSatFix::clear_position_covariance_type() {
  position_covariance_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavSatFix::_internal_position_covariance_type() const {
  return position_covariance_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavSatFix::position_covariance_type() const {
  // @@protoc_insertion_point(field_get:synapse.msgs.NavSatFix.position_covariance_type)
  return _internal_position_covariance_type();
}
inline void NavSatFix::_internal_set_position_covariance_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  position_covariance_type_ = value;
}
inline void NavSatFix::set_position_covariance_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position_covariance_type(value);
  // @@protoc_insertion_point(field_set:synapse.msgs.NavSatFix.position_covariance_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace synapse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nav_5fsat_5ffix_2eproto
